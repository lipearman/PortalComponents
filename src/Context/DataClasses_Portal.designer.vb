'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Portal")>  _
Partial Public Class DataClasses_PortalDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEmpGroup(instance As EmpGroup)
    End Sub
  Partial Private Sub UpdateEmpGroup(instance As EmpGroup)
    End Sub
  Partial Private Sub DeleteEmpGroup(instance As EmpGroup)
    End Sub
  Partial Private Sub InsertSSO_UserGroup(instance As SSO_UserGroup)
    End Sub
  Partial Private Sub UpdateSSO_UserGroup(instance As SSO_UserGroup)
    End Sub
  Partial Private Sub DeleteSSO_UserGroup(instance As SSO_UserGroup)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertMailNotification(instance As MailNotification)
    End Sub
  Partial Private Sub UpdateMailNotification(instance As MailNotification)
    End Sub
  Partial Private Sub DeleteMailNotification(instance As MailNotification)
    End Sub
  Partial Private Sub Insertmaster_amphur(instance As master_amphur)
    End Sub
  Partial Private Sub Updatemaster_amphur(instance As master_amphur)
    End Sub
  Partial Private Sub Deletemaster_amphur(instance As master_amphur)
    End Sub
  Partial Private Sub Insertmaster_district(instance As master_district)
    End Sub
  Partial Private Sub Updatemaster_district(instance As master_district)
    End Sub
  Partial Private Sub Deletemaster_district(instance As master_district)
    End Sub
  Partial Private Sub Insertmaster_geography(instance As master_geography)
    End Sub
  Partial Private Sub Updatemaster_geography(instance As master_geography)
    End Sub
  Partial Private Sub Deletemaster_geography(instance As master_geography)
    End Sub
  Partial Private Sub Insertmaster_location(instance As master_location)
    End Sub
  Partial Private Sub Updatemaster_location(instance As master_location)
    End Sub
  Partial Private Sub Deletemaster_location(instance As master_location)
    End Sub
  Partial Private Sub Insertmaster_province(instance As master_province)
    End Sub
  Partial Private Sub Updatemaster_province(instance As master_province)
    End Sub
  Partial Private Sub Deletemaster_province(instance As master_province)
    End Sub
  Partial Private Sub Insertmaster_zipcode(instance As master_zipcode)
    End Sub
  Partial Private Sub Updatemaster_zipcode(instance As master_zipcode)
    End Sub
  Partial Private Sub Deletemaster_zipcode(instance As master_zipcode)
    End Sub
  Partial Private Sub InsertPortal_Permission(instance As Portal_Permission)
    End Sub
  Partial Private Sub UpdatePortal_Permission(instance As Portal_Permission)
    End Sub
  Partial Private Sub DeletePortal_Permission(instance As Portal_Permission)
    End Sub
  Partial Private Sub InsertPortal_Role(instance As Portal_Role)
    End Sub
  Partial Private Sub UpdatePortal_Role(instance As Portal_Role)
    End Sub
  Partial Private Sub DeletePortal_Role(instance As Portal_Role)
    End Sub
  Partial Private Sub InsertPortal_Table(instance As Portal_Table)
    End Sub
  Partial Private Sub UpdatePortal_Table(instance As Portal_Table)
    End Sub
  Partial Private Sub DeletePortal_Table(instance As Portal_Table)
    End Sub
  Partial Private Sub InsertPortal_UserTab(instance As Portal_UserTab)
    End Sub
  Partial Private Sub UpdatePortal_UserTab(instance As Portal_UserTab)
    End Sub
  Partial Private Sub DeletePortal_UserTab(instance As Portal_UserTab)
    End Sub
  Partial Private Sub InsertPortalCfg_Global(instance As PortalCfg_Global)
    End Sub
  Partial Private Sub UpdatePortalCfg_Global(instance As PortalCfg_Global)
    End Sub
  Partial Private Sub DeletePortalCfg_Global(instance As PortalCfg_Global)
    End Sub
  Partial Private Sub InsertPortalCfg_Module(instance As PortalCfg_Module)
    End Sub
  Partial Private Sub UpdatePortalCfg_Module(instance As PortalCfg_Module)
    End Sub
  Partial Private Sub DeletePortalCfg_Module(instance As PortalCfg_Module)
    End Sub
  Partial Private Sub InsertPortalCfg_ModuleSetting(instance As PortalCfg_ModuleSetting)
    End Sub
  Partial Private Sub UpdatePortalCfg_ModuleSetting(instance As PortalCfg_ModuleSetting)
    End Sub
  Partial Private Sub DeletePortalCfg_ModuleSetting(instance As PortalCfg_ModuleSetting)
    End Sub
  Partial Private Sub InsertSingleSignOn_Mapping(instance As SingleSignOn_Mapping)
    End Sub
  Partial Private Sub UpdateSingleSignOn_Mapping(instance As SingleSignOn_Mapping)
    End Sub
  Partial Private Sub DeleteSingleSignOn_Mapping(instance As SingleSignOn_Mapping)
    End Sub
  Partial Private Sub InsertSingleSignOn_Passport(instance As SingleSignOn_Passport)
    End Sub
  Partial Private Sub UpdateSingleSignOn_Passport(instance As SingleSignOn_Passport)
    End Sub
  Partial Private Sub DeleteSingleSignOn_Passport(instance As SingleSignOn_Passport)
    End Sub
  Partial Private Sub InsertPortalCfg_ModuleDefinition(instance As PortalCfg_ModuleDefinition)
    End Sub
  Partial Private Sub UpdatePortalCfg_ModuleDefinition(instance As PortalCfg_ModuleDefinition)
    End Sub
  Partial Private Sub DeletePortalCfg_ModuleDefinition(instance As PortalCfg_ModuleDefinition)
    End Sub
  Partial Private Sub InsertPortal_TabRole(instance As Portal_TabRole)
    End Sub
  Partial Private Sub UpdatePortal_TabRole(instance As Portal_TabRole)
    End Sub
  Partial Private Sub DeletePortal_TabRole(instance As Portal_TabRole)
    End Sub
  Partial Private Sub InsertPortal_UserRole(instance As Portal_UserRole)
    End Sub
  Partial Private Sub UpdatePortal_UserRole(instance As Portal_UserRole)
    End Sub
  Partial Private Sub DeletePortal_UserRole(instance As Portal_UserRole)
    End Sub
  Partial Private Sub InsertPortal_User(instance As Portal_User)
    End Sub
  Partial Private Sub UpdatePortal_User(instance As Portal_User)
    End Sub
  Partial Private Sub DeletePortal_User(instance As Portal_User)
    End Sub
  Partial Private Sub InsertPortal_Users_OTPLog(instance As Portal_Users_OTPLog)
    End Sub
  Partial Private Sub UpdatePortal_Users_OTPLog(instance As Portal_Users_OTPLog)
    End Sub
  Partial Private Sub DeletePortal_Users_OTPLog(instance As Portal_Users_OTPLog)
    End Sub
  Partial Private Sub InsertPortal_Users_PasswordLog(instance As Portal_Users_PasswordLog)
    End Sub
  Partial Private Sub UpdatePortal_Users_PasswordLog(instance As Portal_Users_PasswordLog)
    End Sub
  Partial Private Sub DeletePortal_Users_PasswordLog(instance As Portal_Users_PasswordLog)
    End Sub
  Partial Private Sub InsertPortalCfg_Tab(instance As PortalCfg_Tab)
    End Sub
  Partial Private Sub UpdatePortalCfg_Tab(instance As PortalCfg_Tab)
    End Sub
  Partial Private Sub DeletePortalCfg_Tab(instance As PortalCfg_Tab)
    End Sub
  Partial Private Sub InsertPortal_Users_DefaultPage(instance As Portal_Users_DefaultPage)
    End Sub
  Partial Private Sub UpdatePortal_Users_DefaultPage(instance As Portal_Users_DefaultPage)
    End Sub
  Partial Private Sub DeletePortal_Users_DefaultPage(instance As Portal_Users_DefaultPage)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(Global.Portal.Components.My.MySettings.Default.PortalConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property vwks_ssoUsers() As System.Data.Linq.Table(Of vwks_ssoUser)
		Get
			Return Me.GetTable(Of vwks_ssoUser)
		End Get
	End Property
	
	Public ReadOnly Property ModuleSettingsByPortals() As System.Data.Linq.Table(Of ModuleSettingsByPortal)
		Get
			Return Me.GetTable(Of ModuleSettingsByPortal)
		End Get
	End Property
	
	Public ReadOnly Property ProjectRoles() As System.Data.Linq.Table(Of ProjectRole)
		Get
			Return Me.GetTable(Of ProjectRole)
		End Get
	End Property
	
	Public ReadOnly Property ProjectRoleUsers() As System.Data.Linq.Table(Of ProjectRoleUser)
		Get
			Return Me.GetTable(Of ProjectRoleUser)
		End Get
	End Property
	
	Public ReadOnly Property ProjectSingleSignOn_Mappings() As System.Data.Linq.Table(Of ProjectSingleSignOn_Mapping)
		Get
			Return Me.GetTable(Of ProjectSingleSignOn_Mapping)
		End Get
	End Property
	
	Public ReadOnly Property UserTabs() As System.Data.Linq.Table(Of UserTab)
		Get
			Return Me.GetTable(Of UserTab)
		End Get
	End Property
	
	Public ReadOnly Property v_ads_actives() As System.Data.Linq.Table(Of v_ads_active)
		Get
			Return Me.GetTable(Of v_ads_active)
		End Get
	End Property
	
	Public ReadOnly Property v_ads_lapcs() As System.Data.Linq.Table(Of v_ads_lapc)
		Get
			Return Me.GetTable(Of v_ads_lapc)
		End Get
	End Property
	
	Public ReadOnly Property v_locations() As System.Data.Linq.Table(Of v_location)
		Get
			Return Me.GetTable(Of v_location)
		End Get
	End Property
	
	Public ReadOnly Property V_LWT_USERs() As System.Data.Linq.Table(Of V_LWT_USER)
		Get
			Return Me.GetTable(Of V_LWT_USER)
		End Get
	End Property
	
	Public ReadOnly Property v_NewUserADs() As System.Data.Linq.Table(Of v_NewUserAD)
		Get
			Return Me.GetTable(Of v_NewUserAD)
		End Get
	End Property
	
	Public ReadOnly Property V_SSO_Logins() As System.Data.Linq.Table(Of V_SSO_Login)
		Get
			Return Me.GetTable(Of V_SSO_Login)
		End Get
	End Property
	
	Public ReadOnly Property v_user_roles() As System.Data.Linq.Table(Of v_user_role)
		Get
			Return Me.GetTable(Of v_user_role)
		End Get
	End Property
	
	Public ReadOnly Property vLEON_UserMappings() As System.Data.Linq.Table(Of vLEON_UserMapping)
		Get
			Return Me.GetTable(Of vLEON_UserMapping)
		End Get
	End Property
	
	Public ReadOnly Property EmpGroups() As System.Data.Linq.Table(Of EmpGroup)
		Get
			Return Me.GetTable(Of EmpGroup)
		End Get
	End Property
	
	Public ReadOnly Property SSO_UserGroups() As System.Data.Linq.Table(Of SSO_UserGroup)
		Get
			Return Me.GetTable(Of SSO_UserGroup)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property MailNotifications() As System.Data.Linq.Table(Of MailNotification)
		Get
			Return Me.GetTable(Of MailNotification)
		End Get
	End Property
	
	Public ReadOnly Property master_amphurs() As System.Data.Linq.Table(Of master_amphur)
		Get
			Return Me.GetTable(Of master_amphur)
		End Get
	End Property
	
	Public ReadOnly Property master_districts() As System.Data.Linq.Table(Of master_district)
		Get
			Return Me.GetTable(Of master_district)
		End Get
	End Property
	
	Public ReadOnly Property master_geographies() As System.Data.Linq.Table(Of master_geography)
		Get
			Return Me.GetTable(Of master_geography)
		End Get
	End Property
	
	Public ReadOnly Property master_locations() As System.Data.Linq.Table(Of master_location)
		Get
			Return Me.GetTable(Of master_location)
		End Get
	End Property
	
	Public ReadOnly Property master_provinces() As System.Data.Linq.Table(Of master_province)
		Get
			Return Me.GetTable(Of master_province)
		End Get
	End Property
	
	Public ReadOnly Property master_zipcodes() As System.Data.Linq.Table(Of master_zipcode)
		Get
			Return Me.GetTable(Of master_zipcode)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Permissions() As System.Data.Linq.Table(Of Portal_Permission)
		Get
			Return Me.GetTable(Of Portal_Permission)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Roles() As System.Data.Linq.Table(Of Portal_Role)
		Get
			Return Me.GetTable(Of Portal_Role)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Tables() As System.Data.Linq.Table(Of Portal_Table)
		Get
			Return Me.GetTable(Of Portal_Table)
		End Get
	End Property
	
	Public ReadOnly Property Portal_UserTabs() As System.Data.Linq.Table(Of Portal_UserTab)
		Get
			Return Me.GetTable(Of Portal_UserTab)
		End Get
	End Property
	
	Public ReadOnly Property PortalCfg_Globals() As System.Data.Linq.Table(Of PortalCfg_Global)
		Get
			Return Me.GetTable(Of PortalCfg_Global)
		End Get
	End Property
	
	Public ReadOnly Property PortalCfg_Modules() As System.Data.Linq.Table(Of PortalCfg_Module)
		Get
			Return Me.GetTable(Of PortalCfg_Module)
		End Get
	End Property
	
	Public ReadOnly Property PortalCfg_ModuleSettings() As System.Data.Linq.Table(Of PortalCfg_ModuleSetting)
		Get
			Return Me.GetTable(Of PortalCfg_ModuleSetting)
		End Get
	End Property
	
	Public ReadOnly Property SingleSignOn_Mappings() As System.Data.Linq.Table(Of SingleSignOn_Mapping)
		Get
			Return Me.GetTable(Of SingleSignOn_Mapping)
		End Get
	End Property
	
	Public ReadOnly Property SingleSignOn_Passports() As System.Data.Linq.Table(Of SingleSignOn_Passport)
		Get
			Return Me.GetTable(Of SingleSignOn_Passport)
		End Get
	End Property
	
	Public ReadOnly Property PortalCfg_ModuleDefinitions() As System.Data.Linq.Table(Of PortalCfg_ModuleDefinition)
		Get
			Return Me.GetTable(Of PortalCfg_ModuleDefinition)
		End Get
	End Property
	
	Public ReadOnly Property Portal_TabRoles() As System.Data.Linq.Table(Of Portal_TabRole)
		Get
			Return Me.GetTable(Of Portal_TabRole)
		End Get
	End Property
	
	Public ReadOnly Property Portal_UserRoles() As System.Data.Linq.Table(Of Portal_UserRole)
		Get
			Return Me.GetTable(Of Portal_UserRole)
		End Get
	End Property
	
	Public ReadOnly Property v_ModuleSettings() As System.Data.Linq.Table(Of v_ModuleSetting)
		Get
			Return Me.GetTable(Of v_ModuleSetting)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Users() As System.Data.Linq.Table(Of Portal_User)
		Get
			Return Me.GetTable(Of Portal_User)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Users_OTPLogs() As System.Data.Linq.Table(Of Portal_Users_OTPLog)
		Get
			Return Me.GetTable(Of Portal_Users_OTPLog)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Users_PasswordLogs() As System.Data.Linq.Table(Of Portal_Users_PasswordLog)
		Get
			Return Me.GetTable(Of Portal_Users_PasswordLog)
		End Get
	End Property
	
	Public ReadOnly Property v_DesktopTabs() As System.Data.Linq.Table(Of v_DesktopTab)
		Get
			Return Me.GetTable(Of v_DesktopTab)
		End Get
	End Property
	
	Public ReadOnly Property v_UserTabs() As System.Data.Linq.Table(Of v_UserTab)
		Get
			Return Me.GetTable(Of v_UserTab)
		End Get
	End Property
	
	Public ReadOnly Property PortalCfg_Tabs() As System.Data.Linq.Table(Of PortalCfg_Tab)
		Get
			Return Me.GetTable(Of PortalCfg_Tab)
		End Get
	End Property
	
	Public ReadOnly Property Portal_Users_DefaultPages() As System.Data.Linq.Table(Of Portal_Users_DefaultPage)
		Get
			Return Me.GetTable(Of Portal_Users_DefaultPage)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_SetUserRolePermission")>  _
	Public Function sp_SetUserRolePermission(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="Int")> ByVal userID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleId", DbType:="Int")> ByVal roleId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Custom_Permission", DbType:="NText")> ByVal custom_Permission As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, roleId, custom_Permission)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vwks_ssoUsers")>  _
Partial Public Class vwks_ssoUser
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _UserType As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _LastPasswordChangedDate As System.Nullable(Of Date)
	
	Private _FailedPasswordAttemptCount As System.Nullable(Of Integer)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserType() As String
		Get
			Return Me._UserType
		End Get
		Set
			If (String.Equals(Me._UserType, value) = false) Then
				Me._UserType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me._PasswordQuestion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me._PasswordAnswer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime")>  _
	Public Property LastPasswordChangedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If (Me._LastPasswordChangedDate.Equals(value) = false) Then
				Me._LastPasswordChangedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int")>  _
	Public Property FailedPasswordAttemptCount() As System.Nullable(Of Integer)
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If (Me._FailedPasswordAttemptCount.Equals(value) = false) Then
				Me._FailedPasswordAttemptCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me._IsActive = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ModuleSettingsByPortal")>  _
Partial Public Class ModuleSettingsByPortal
	
	Private _ModulePage As String
	
	Private _ModuleId As Integer
	
	Private _ModuleTitle As String
	
	Private _ModuleOrder As System.Nullable(Of Integer)
	
	Private _EditRoles As String
	
	Private _PaneName As String
	
	Private _ShowMobile As System.Nullable(Of Boolean)
	
	Private _CacheTimeout As System.Nullable(Of Integer)
	
	Private _ModuleDefId As System.Nullable(Of Integer)
	
	Private _TabId As System.Nullable(Of Integer)
	
	Private _FriendlyName As String
	
	Private _DesktopSourceFile As String
	
	Private _MobileSourceFile As String
	
	Private _ModuleDefCode As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModulePage", DbType:="VarChar(67)")>  _
	Public Property ModulePage() As String
		Get
			Return Me._ModulePage
		End Get
		Set
			If (String.Equals(Me._ModulePage, value) = false) Then
				Me._ModulePage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleId", DbType:="Int NOT NULL")>  _
	Public Property ModuleId() As Integer
		Get
			Return Me._ModuleId
		End Get
		Set
			If ((Me._ModuleId = value)  _
						= false) Then
				Me._ModuleId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleTitle", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property ModuleTitle() As String
		Get
			Return Me._ModuleTitle
		End Get
		Set
			If (String.Equals(Me._ModuleTitle, value) = false) Then
				Me._ModuleTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleOrder", DbType:="Int")>  _
	Public Property ModuleOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleOrder
		End Get
		Set
			If (Me._ModuleOrder.Equals(value) = false) Then
				Me._ModuleOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EditRoles", DbType:="VarChar(MAX)")>  _
	Public Property EditRoles() As String
		Get
			Return Me._EditRoles
		End Get
		Set
			If (String.Equals(Me._EditRoles, value) = false) Then
				Me._EditRoles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaneName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PaneName() As String
		Get
			Return Me._PaneName
		End Get
		Set
			If (String.Equals(Me._PaneName, value) = false) Then
				Me._PaneName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowMobile", DbType:="Bit")>  _
	Public Property ShowMobile() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowMobile
		End Get
		Set
			If (Me._ShowMobile.Equals(value) = false) Then
				Me._ShowMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CacheTimeout", DbType:="Int")>  _
	Public Property CacheTimeout() As System.Nullable(Of Integer)
		Get
			Return Me._CacheTimeout
		End Get
		Set
			If (Me._CacheTimeout.Equals(value) = false) Then
				Me._CacheTimeout = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefId", DbType:="Int")>  _
	Public Property ModuleDefId() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleDefId
		End Get
		Set
			If (Me._ModuleDefId.Equals(value) = false) Then
				Me._ModuleDefId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				Me._TabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FriendlyName", DbType:="NVarChar(150)")>  _
	Public Property FriendlyName() As String
		Get
			Return Me._FriendlyName
		End Get
		Set
			If (String.Equals(Me._FriendlyName, value) = false) Then
				Me._FriendlyName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesktopSourceFile", DbType:="NVarChar(250)")>  _
	Public Property DesktopSourceFile() As String
		Get
			Return Me._DesktopSourceFile
		End Get
		Set
			If (String.Equals(Me._DesktopSourceFile, value) = false) Then
				Me._DesktopSourceFile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileSourceFile", DbType:="NVarChar(250)")>  _
	Public Property MobileSourceFile() As String
		Get
			Return Me._MobileSourceFile
		End Get
		Set
			If (String.Equals(Me._MobileSourceFile, value) = false) Then
				Me._MobileSourceFile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefCode", DbType:="VarChar(50)")>  _
	Public Property ModuleDefCode() As String
		Get
			Return Me._ModuleDefCode
		End Get
		Set
			If (String.Equals(Me._ModuleDefCode, value) = false) Then
				Me._ModuleDefCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me._CreateDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me._ModifyDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProjectRoles")>  _
Partial Public Class ProjectRole
	
	Private _RoleID As Integer
	
	Private _PortalID As Integer
	
	Private _RoleName As String
	
	Private _RoleDescription As String
	
	Private _RoleCode As String
	
	Private _PortalName As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL")>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me._RoleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me._PortalID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me._RoleName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleDescription", DbType:="NVarChar(400)")>  _
	Public Property RoleDescription() As String
		Get
			Return Me._RoleDescription
		End Get
		Set
			If (String.Equals(Me._RoleDescription, value) = false) Then
				Me._RoleDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleCode", DbType:="NVarChar(50)")>  _
	Public Property RoleCode() As String
		Get
			Return Me._RoleCode
		End Get
		Set
			If (String.Equals(Me._RoleCode, value) = false) Then
				Me._RoleCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me._CreateDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me._ModifyDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProjectRoleUsers")>  _
Partial Public Class ProjectRoleUser
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _RoleID As Integer
	
	Private _RoleName As String
	
	Private _RoleDescription As String
	
	Private _RoleCode As String
	
	Private _PortalId As Integer
	
	Private _PortalCode As String
	
	Private _PortalName As String
	
	Private _Permissions As String
	
	Private _Custom_Permission As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL")>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me._RoleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me._RoleName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleDescription", DbType:="NVarChar(400)")>  _
	Public Property RoleDescription() As String
		Get
			Return Me._RoleDescription
		End Get
		Set
			If (String.Equals(Me._RoleDescription, value) = false) Then
				Me._RoleDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleCode", DbType:="NVarChar(50)")>  _
	Public Property RoleCode() As String
		Get
			Return Me._RoleCode
		End Get
		Set
			If (String.Equals(Me._RoleCode, value) = false) Then
				Me._RoleCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="VarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me._PortalCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permissions", DbType:="NVarChar(50)")>  _
	Public Property Permissions() As String
		Get
			Return Me._Permissions
		End Get
		Set
			If (String.Equals(Me._Permissions, value) = false) Then
				Me._Permissions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Custom_Permission", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Custom_Permission() As String
		Get
			Return Me._Custom_Permission
		End Get
		Set
			If (String.Equals(Me._Custom_Permission, value) = false) Then
				Me._Custom_Permission = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProjectSingleSignOn_Mapping")>  _
Partial Public Class ProjectSingleSignOn_Mapping
	
	Private _ID As Integer
	
	Private _UserMapping As String
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _RoleID As Integer
	
	Private _RoleName As String
	
	Private _RoleDescription As String
	
	Private _RoleCode As String
	
	Private _PortalId As Integer
	
	Private _PortalCode As String
	
	Private _PortalName As String
	
	Private _Permissions As String
	
	Private _Custom_Permission As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserMapping", DbType:="VarChar(50)")>  _
	Public Property UserMapping() As String
		Get
			Return Me._UserMapping
		End Get
		Set
			If (String.Equals(Me._UserMapping, value) = false) Then
				Me._UserMapping = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL")>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me._RoleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me._RoleName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleDescription", DbType:="NVarChar(400)")>  _
	Public Property RoleDescription() As String
		Get
			Return Me._RoleDescription
		End Get
		Set
			If (String.Equals(Me._RoleDescription, value) = false) Then
				Me._RoleDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleCode", DbType:="NVarChar(50)")>  _
	Public Property RoleCode() As String
		Get
			Return Me._RoleCode
		End Get
		Set
			If (String.Equals(Me._RoleCode, value) = false) Then
				Me._RoleCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="VarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me._PortalCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permissions", DbType:="NVarChar(50)")>  _
	Public Property Permissions() As String
		Get
			Return Me._Permissions
		End Get
		Set
			If (String.Equals(Me._Permissions, value) = false) Then
				Me._Permissions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Custom_Permission", DbType:="VarChar(30)")>  _
	Public Property Custom_Permission() As String
		Get
			Return Me._Custom_Permission
		End Get
		Set
			If (String.Equals(Me._Custom_Permission, value) = false) Then
				Me._Custom_Permission = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserTabs")>  _
Partial Public Class UserTab
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _TabId As System.Nullable(Of Integer)
	
	Private _TabName As String
	
	Private _TabOrder As System.Nullable(Of Integer)
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Private _Permission As String
	
	Private _PortalId As Integer
	
	Private _PortalCode As String
	
	Private _PortalName As String
	
	Private _Sortpath As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				Me._TabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabName", DbType:="NVarChar(150)")>  _
	Public Property TabName() As String
		Get
			Return Me._TabName
		End Get
		Set
			If (String.Equals(Me._TabName, value) = false) Then
				Me._TabName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabOrder", DbType:="Int")>  _
	Public Property TabOrder() As System.Nullable(Of Integer)
		Get
			Return Me._TabOrder
		End Get
		Set
			If (Me._TabOrder.Equals(value) = false) Then
				Me._TabOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int")>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				Me._ParentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permission", DbType:="VarChar(255)")>  _
	Public Property Permission() As String
		Get
			Return Me._Permission
		End Get
		Set
			If (String.Equals(Me._Permission, value) = false) Then
				Me._Permission = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="VarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me._PortalCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sortpath", DbType:="VarChar(MAX)")>  _
	Public Property Sortpath() As String
		Get
			Return Me._Sortpath
		End Get
		Set
			If (String.Equals(Me._Sortpath, value) = false) Then
				Me._Sortpath = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_ads_active")>  _
Partial Public Class v_ads_active
	
	Private _objectGUID As System.Data.Linq.Binary
	
	Private _lastLogon As String
	
	Private _accountExpires As String
	
	Private _givenname As String
	
	Private _physicalDeliveryOfficeName As String
	
	Private _department As String
	
	Private _facsimileTelephoneNumber As String
	
	Private _mobile As String
	
	Private _ou As String
	
	Private _mail As String
	
	Private _sAMAccountName As String
	
	Private _telephoneNumber As String
	
	Private _displayName As String
	
	Private _title As String
	
	Private _company As String
	
	Private _pager As String
	
	Private _streetaddress As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_objectGUID", DbType:="VarBinary(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property objectGUID() As System.Data.Linq.Binary
		Get
			Return Me._objectGUID
		End Get
		Set
			If (Object.Equals(Me._objectGUID, value) = false) Then
				Me._objectGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLogon", DbType:="NVarChar(4000)")>  _
	Public Property lastLogon() As String
		Get
			Return Me._lastLogon
		End Get
		Set
			If (String.Equals(Me._lastLogon, value) = false) Then
				Me._lastLogon = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountExpires", DbType:="NVarChar(4000)")>  _
	Public Property accountExpires() As String
		Get
			Return Me._accountExpires
		End Get
		Set
			If (String.Equals(Me._accountExpires, value) = false) Then
				Me._accountExpires = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_givenname", DbType:="NVarChar(4000)")>  _
	Public Property givenname() As String
		Get
			Return Me._givenname
		End Get
		Set
			If (String.Equals(Me._givenname, value) = false) Then
				Me._givenname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_physicalDeliveryOfficeName", DbType:="NVarChar(4000)")>  _
	Public Property physicalDeliveryOfficeName() As String
		Get
			Return Me._physicalDeliveryOfficeName
		End Get
		Set
			If (String.Equals(Me._physicalDeliveryOfficeName, value) = false) Then
				Me._physicalDeliveryOfficeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_department", DbType:="NVarChar(4000)")>  _
	Public Property department() As String
		Get
			Return Me._department
		End Get
		Set
			If (String.Equals(Me._department, value) = false) Then
				Me._department = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facsimileTelephoneNumber", DbType:="NVarChar(4000)")>  _
	Public Property facsimileTelephoneNumber() As String
		Get
			Return Me._facsimileTelephoneNumber
		End Get
		Set
			If (String.Equals(Me._facsimileTelephoneNumber, value) = false) Then
				Me._facsimileTelephoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mobile", DbType:="NVarChar(4000)")>  _
	Public Property mobile() As String
		Get
			Return Me._mobile
		End Get
		Set
			If (String.Equals(Me._mobile, value) = false) Then
				Me._mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ou", DbType:="NVarChar(4000)")>  _
	Public Property ou() As String
		Get
			Return Me._ou
		End Get
		Set
			If (String.Equals(Me._ou, value) = false) Then
				Me._ou = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mail", DbType:="NVarChar(4000)")>  _
	Public Property mail() As String
		Get
			Return Me._mail
		End Get
		Set
			If (String.Equals(Me._mail, value) = false) Then
				Me._mail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAMAccountName", DbType:="NVarChar(4000)")>  _
	Public Property sAMAccountName() As String
		Get
			Return Me._sAMAccountName
		End Get
		Set
			If (String.Equals(Me._sAMAccountName, value) = false) Then
				Me._sAMAccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telephoneNumber", DbType:="NVarChar(4000)")>  _
	Public Property telephoneNumber() As String
		Get
			Return Me._telephoneNumber
		End Get
		Set
			If (String.Equals(Me._telephoneNumber, value) = false) Then
				Me._telephoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayName", DbType:="NVarChar(4000)")>  _
	Public Property displayName() As String
		Get
			Return Me._displayName
		End Get
		Set
			If (String.Equals(Me._displayName, value) = false) Then
				Me._displayName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(4000)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me._title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="NVarChar(4000)")>  _
	Public Property company() As String
		Get
			Return Me._company
		End Get
		Set
			If (String.Equals(Me._company, value) = false) Then
				Me._company = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pager", DbType:="NVarChar(4000)")>  _
	Public Property pager() As String
		Get
			Return Me._pager
		End Get
		Set
			If (String.Equals(Me._pager, value) = false) Then
				Me._pager = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetaddress", DbType:="NVarChar(4000)")>  _
	Public Property streetaddress() As String
		Get
			Return Me._streetaddress
		End Get
		Set
			If (String.Equals(Me._streetaddress, value) = false) Then
				Me._streetaddress = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_ads_lapcs")>  _
Partial Public Class v_ads_lapc
	
	Private _objectGUID As System.Data.Linq.Binary
	
	Private _lastLogon As String
	
	Private _accountExpires As String
	
	Private _givenname As String
	
	Private _physicalDeliveryOfficeName As String
	
	Private _department As String
	
	Private _facsimileTelephoneNumber As String
	
	Private _mobile As String
	
	Private _ou As String
	
	Private _mail As String
	
	Private _sAMAccountName As String
	
	Private _telephoneNumber As String
	
	Private _displayName As String
	
	Private _title As String
	
	Private _company As String
	
	Private _pager As String
	
	Private _streetaddress As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_objectGUID", DbType:="VarBinary(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property objectGUID() As System.Data.Linq.Binary
		Get
			Return Me._objectGUID
		End Get
		Set
			If (Object.Equals(Me._objectGUID, value) = false) Then
				Me._objectGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLogon", DbType:="NVarChar(4000)")>  _
	Public Property lastLogon() As String
		Get
			Return Me._lastLogon
		End Get
		Set
			If (String.Equals(Me._lastLogon, value) = false) Then
				Me._lastLogon = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountExpires", DbType:="NVarChar(4000)")>  _
	Public Property accountExpires() As String
		Get
			Return Me._accountExpires
		End Get
		Set
			If (String.Equals(Me._accountExpires, value) = false) Then
				Me._accountExpires = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_givenname", DbType:="NVarChar(4000)")>  _
	Public Property givenname() As String
		Get
			Return Me._givenname
		End Get
		Set
			If (String.Equals(Me._givenname, value) = false) Then
				Me._givenname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_physicalDeliveryOfficeName", DbType:="NVarChar(4000)")>  _
	Public Property physicalDeliveryOfficeName() As String
		Get
			Return Me._physicalDeliveryOfficeName
		End Get
		Set
			If (String.Equals(Me._physicalDeliveryOfficeName, value) = false) Then
				Me._physicalDeliveryOfficeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_department", DbType:="NVarChar(4000)")>  _
	Public Property department() As String
		Get
			Return Me._department
		End Get
		Set
			If (String.Equals(Me._department, value) = false) Then
				Me._department = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facsimileTelephoneNumber", DbType:="NVarChar(4000)")>  _
	Public Property facsimileTelephoneNumber() As String
		Get
			Return Me._facsimileTelephoneNumber
		End Get
		Set
			If (String.Equals(Me._facsimileTelephoneNumber, value) = false) Then
				Me._facsimileTelephoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mobile", DbType:="NVarChar(4000)")>  _
	Public Property mobile() As String
		Get
			Return Me._mobile
		End Get
		Set
			If (String.Equals(Me._mobile, value) = false) Then
				Me._mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ou", DbType:="NVarChar(4000)")>  _
	Public Property ou() As String
		Get
			Return Me._ou
		End Get
		Set
			If (String.Equals(Me._ou, value) = false) Then
				Me._ou = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mail", DbType:="NVarChar(4000)")>  _
	Public Property mail() As String
		Get
			Return Me._mail
		End Get
		Set
			If (String.Equals(Me._mail, value) = false) Then
				Me._mail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAMAccountName", DbType:="NVarChar(4000)")>  _
	Public Property sAMAccountName() As String
		Get
			Return Me._sAMAccountName
		End Get
		Set
			If (String.Equals(Me._sAMAccountName, value) = false) Then
				Me._sAMAccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telephoneNumber", DbType:="NVarChar(4000)")>  _
	Public Property telephoneNumber() As String
		Get
			Return Me._telephoneNumber
		End Get
		Set
			If (String.Equals(Me._telephoneNumber, value) = false) Then
				Me._telephoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayName", DbType:="NVarChar(4000)")>  _
	Public Property displayName() As String
		Get
			Return Me._displayName
		End Get
		Set
			If (String.Equals(Me._displayName, value) = false) Then
				Me._displayName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(4000)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me._title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="NVarChar(4000)")>  _
	Public Property company() As String
		Get
			Return Me._company
		End Get
		Set
			If (String.Equals(Me._company, value) = false) Then
				Me._company = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pager", DbType:="NVarChar(4000)")>  _
	Public Property pager() As String
		Get
			Return Me._pager
		End Get
		Set
			If (String.Equals(Me._pager, value) = false) Then
				Me._pager = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetaddress", DbType:="NVarChar(4000)")>  _
	Public Property streetaddress() As String
		Get
			Return Me._streetaddress
		End Get
		Set
			If (String.Equals(Me._streetaddress, value) = false) Then
				Me._streetaddress = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_location")>  _
Partial Public Class v_location
	
	Private _LOCATION_CODE As String
	
	Private _LOCATION_NAME As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCATION_CODE", DbType:="VarChar(6)")>  _
	Public Property LOCATION_CODE() As String
		Get
			Return Me._LOCATION_CODE
		End Get
		Set
			If (String.Equals(Me._LOCATION_CODE, value) = false) Then
				Me._LOCATION_CODE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCATION_NAME", DbType:="VarChar(164)")>  _
	Public Property LOCATION_NAME() As String
		Get
			Return Me._LOCATION_NAME
		End Get
		Set
			If (String.Equals(Me._LOCATION_NAME, value) = false) Then
				Me._LOCATION_NAME = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_LWT_USER")>  _
Partial Public Class V_LWT_USER
	
	Private _UserID As Integer
	
	Private _objectGUID As System.Data.Linq.Binary
	
	Private _lastLogon As String
	
	Private _accountExpires As String
	
	Private _givenname As String
	
	Private _physicalDeliveryOfficeName As String
	
	Private _department As String
	
	Private _facsimileTelephoneNumber As String
	
	Private _mobile As String
	
	Private _ou As String
	
	Private _mail As String
	
	Private _sAMAccountName As String
	
	Private _telephoneNumber As String
	
	Private _displayName As String
	
	Private _title As String
	
	Private _company As String
	
	Private _pager As String
	
	Private _streetaddress As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_objectGUID", DbType:="VarBinary(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property objectGUID() As System.Data.Linq.Binary
		Get
			Return Me._objectGUID
		End Get
		Set
			If (Object.Equals(Me._objectGUID, value) = false) Then
				Me._objectGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLogon", DbType:="NVarChar(4000)")>  _
	Public Property lastLogon() As String
		Get
			Return Me._lastLogon
		End Get
		Set
			If (String.Equals(Me._lastLogon, value) = false) Then
				Me._lastLogon = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountExpires", DbType:="NVarChar(4000)")>  _
	Public Property accountExpires() As String
		Get
			Return Me._accountExpires
		End Get
		Set
			If (String.Equals(Me._accountExpires, value) = false) Then
				Me._accountExpires = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_givenname", DbType:="NVarChar(4000)")>  _
	Public Property givenname() As String
		Get
			Return Me._givenname
		End Get
		Set
			If (String.Equals(Me._givenname, value) = false) Then
				Me._givenname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_physicalDeliveryOfficeName", DbType:="NVarChar(4000)")>  _
	Public Property physicalDeliveryOfficeName() As String
		Get
			Return Me._physicalDeliveryOfficeName
		End Get
		Set
			If (String.Equals(Me._physicalDeliveryOfficeName, value) = false) Then
				Me._physicalDeliveryOfficeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_department", DbType:="NVarChar(4000)")>  _
	Public Property department() As String
		Get
			Return Me._department
		End Get
		Set
			If (String.Equals(Me._department, value) = false) Then
				Me._department = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facsimileTelephoneNumber", DbType:="NVarChar(4000)")>  _
	Public Property facsimileTelephoneNumber() As String
		Get
			Return Me._facsimileTelephoneNumber
		End Get
		Set
			If (String.Equals(Me._facsimileTelephoneNumber, value) = false) Then
				Me._facsimileTelephoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mobile", DbType:="NVarChar(4000)")>  _
	Public Property mobile() As String
		Get
			Return Me._mobile
		End Get
		Set
			If (String.Equals(Me._mobile, value) = false) Then
				Me._mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ou", DbType:="NVarChar(4000)")>  _
	Public Property ou() As String
		Get
			Return Me._ou
		End Get
		Set
			If (String.Equals(Me._ou, value) = false) Then
				Me._ou = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mail", DbType:="NVarChar(4000)")>  _
	Public Property mail() As String
		Get
			Return Me._mail
		End Get
		Set
			If (String.Equals(Me._mail, value) = false) Then
				Me._mail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAMAccountName", DbType:="NVarChar(4000)")>  _
	Public Property sAMAccountName() As String
		Get
			Return Me._sAMAccountName
		End Get
		Set
			If (String.Equals(Me._sAMAccountName, value) = false) Then
				Me._sAMAccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telephoneNumber", DbType:="NVarChar(4000)")>  _
	Public Property telephoneNumber() As String
		Get
			Return Me._telephoneNumber
		End Get
		Set
			If (String.Equals(Me._telephoneNumber, value) = false) Then
				Me._telephoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayName", DbType:="NVarChar(4000)")>  _
	Public Property displayName() As String
		Get
			Return Me._displayName
		End Get
		Set
			If (String.Equals(Me._displayName, value) = false) Then
				Me._displayName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(4000)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me._title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="NVarChar(4000)")>  _
	Public Property company() As String
		Get
			Return Me._company
		End Get
		Set
			If (String.Equals(Me._company, value) = false) Then
				Me._company = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pager", DbType:="NVarChar(4000)")>  _
	Public Property pager() As String
		Get
			Return Me._pager
		End Get
		Set
			If (String.Equals(Me._pager, value) = false) Then
				Me._pager = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetaddress", DbType:="NVarChar(4000)")>  _
	Public Property streetaddress() As String
		Get
			Return Me._streetaddress
		End Get
		Set
			If (String.Equals(Me._streetaddress, value) = false) Then
				Me._streetaddress = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_NewUserADS")>  _
Partial Public Class v_NewUserAD
	
	Private _objectGUID As System.Data.Linq.Binary
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _Title As String
	
	Private _Address As String
	
	Private _Extension As String
	
	Private _PhotoPath As String
	
	Private _EmpGroupID As Integer
	
	Private _Email As String
	
	Private _TempUserName As String
	
	Private _TempPassword As String
	
	Private _TempPasswordQuestion As String
	
	Private _TempPasswordAnswer As String
	
	Private _IsActivate As Integer
	
	Private _ActivateCode As System.Nullable(Of System.Guid)
	
	Private _ActivationDate As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_objectGUID", DbType:="VarBinary(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property objectGUID() As System.Data.Linq.Binary
		Get
			Return Me._objectGUID
		End Get
		Set
			If (Object.Equals(Me._objectGUID, value) = false) Then
				Me._objectGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(4000)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(4000)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(4000)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(4000)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extension", DbType:="NVarChar(4000)")>  _
	Public Property Extension() As String
		Get
			Return Me._Extension
		End Get
		Set
			If (String.Equals(Me._Extension, value) = false) Then
				Me._Extension = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoPath", DbType:="VarChar(22) NOT NULL", CanBeNull:=false)>  _
	Public Property PhotoPath() As String
		Get
			Return Me._PhotoPath
		End Get
		Set
			If (String.Equals(Me._PhotoPath, value) = false) Then
				Me._PhotoPath = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmpGroupID", DbType:="Int NOT NULL")>  _
	Public Property EmpGroupID() As Integer
		Get
			Return Me._EmpGroupID
		End Get
		Set
			If ((Me._EmpGroupID = value)  _
						= false) Then
				Me._EmpGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(4000)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempUserName", DbType:="NVarChar(4000)")>  _
	Public Property TempUserName() As String
		Get
			Return Me._TempUserName
		End Get
		Set
			If (String.Equals(Me._TempUserName, value) = false) Then
				Me._TempUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPassword", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property TempPassword() As String
		Get
			Return Me._TempPassword
		End Get
		Set
			If (String.Equals(Me._TempPassword, value) = false) Then
				Me._TempPassword = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPasswordQuestion", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property TempPasswordQuestion() As String
		Get
			Return Me._TempPasswordQuestion
		End Get
		Set
			If (String.Equals(Me._TempPasswordQuestion, value) = false) Then
				Me._TempPasswordQuestion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPasswordAnswer", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property TempPasswordAnswer() As String
		Get
			Return Me._TempPasswordAnswer
		End Get
		Set
			If (String.Equals(Me._TempPasswordAnswer, value) = false) Then
				Me._TempPasswordAnswer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActivate", DbType:="Int NOT NULL")>  _
	Public Property IsActivate() As Integer
		Get
			Return Me._IsActivate
		End Get
		Set
			If ((Me._IsActivate = value)  _
						= false) Then
				Me._IsActivate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivateCode", DbType:="UniqueIdentifier")>  _
	Public Property ActivateCode() As System.Nullable(Of System.Guid)
		Get
			Return Me._ActivateCode
		End Get
		Set
			If (Me._ActivateCode.Equals(value) = false) Then
				Me._ActivateCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="DateTime NOT NULL")>  _
	Public Property ActivationDate() As Date
		Get
			Return Me._ActivationDate
		End Get
		Set
			If ((Me._ActivationDate = value)  _
						= false) Then
				Me._ActivationDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_SSO_Login")>  _
Partial Public Class V_SSO_Login
	
	Private _UserName As String
	
	Private _CreationDate As System.Nullable(Of Date)
	
	Private _IP As String
	
	Private _PortalName As String
	
	Private _Title As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me._CreationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="NVarChar(50)")>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me._IP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(400)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_user_roles")>  _
Partial Public Class v_user_role
	
	Private _UserName As String
	
	Private _UserMapping As String
	
	Private _PortalCode As String
	
	Private _RoleCode As String
	
	Private _RoleName As String
	
	Private _Permissions As String
	
	Private _Custom_Permission As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserMapping", DbType:="VarChar(50)")>  _
	Public Property UserMapping() As String
		Get
			Return Me._UserMapping
		End Get
		Set
			If (String.Equals(Me._UserMapping, value) = false) Then
				Me._UserMapping = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="VarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me._PortalCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleCode", DbType:="NVarChar(50)")>  _
	Public Property RoleCode() As String
		Get
			Return Me._RoleCode
		End Get
		Set
			If (String.Equals(Me._RoleCode, value) = false) Then
				Me._RoleCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me._RoleName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permissions", DbType:="NVarChar(50)")>  _
	Public Property Permissions() As String
		Get
			Return Me._Permissions
		End Get
		Set
			If (String.Equals(Me._Permissions, value) = false) Then
				Me._Permissions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Custom_Permission", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Custom_Permission() As String
		Get
			Return Me._Custom_Permission
		End Get
		Set
			If (String.Equals(Me._Custom_Permission, value) = false) Then
				Me._Custom_Permission = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vLEON_UserMapping")>  _
Partial Public Class vLEON_UserMapping
	
	Private _EMPCode As String
	
	Private _Salutation As String
	
	Private _Name As String
	
	Private _Ename As String
	
	Private _Surname As String
	
	Private _Esurname As String
	
	Private _NickName As String
	
	Private _FullNameThai As String
	
	Private _FullNameEng As String
	
	Private _IDCODE As String
	
	Private _BirthDate As System.Nullable(Of Date)
	
	Private _Sex As System.Nullable(Of Char)
	
	Private _EmployDate As System.Nullable(Of Date)
	
	Private _EffectiveDate As System.Nullable(Of Date)
	
	Private _ResignDate As System.Nullable(Of Date)
	
	Private _Position As String
	
	Private _Status As String
	
	Private _Username As String
	
	Private _Password As String
	
	Private _EmailAddress As String
	
	Private _Signature As String
	
	Private _NOTE As String
	
	Private _DivName As String
	
	Private _EmpTypeDesc As String
	
	Private _Department As String
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _UserName2 As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMPCode", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property EMPCode() As String
		Get
			Return Me._EMPCode
		End Get
		Set
			If (String.Equals(Me._EMPCode, value) = false) Then
				Me._EMPCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salutation", DbType:="Char(15)")>  _
	Public Property Salutation() As String
		Get
			Return Me._Salutation
		End Get
		Set
			If (String.Equals(Me._Salutation, value) = false) Then
				Me._Salutation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ename", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Ename() As String
		Get
			Return Me._Ename
		End Get
		Set
			If (String.Equals(Me._Ename, value) = false) Then
				Me._Ename = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(50)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me._Surname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Esurname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Esurname() As String
		Get
			Return Me._Esurname
		End Get
		Set
			If (String.Equals(Me._Esurname, value) = false) Then
				Me._Esurname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NickName", DbType:="VarChar(50)")>  _
	Public Property NickName() As String
		Get
			Return Me._NickName
		End Get
		Set
			If (String.Equals(Me._NickName, value) = false) Then
				Me._NickName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullNameThai", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property FullNameThai() As String
		Get
			Return Me._FullNameThai
		End Get
		Set
			If (String.Equals(Me._FullNameThai, value) = false) Then
				Me._FullNameThai = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullNameEng", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property FullNameEng() As String
		Get
			Return Me._FullNameEng
		End Get
		Set
			If (String.Equals(Me._FullNameEng, value) = false) Then
				Me._FullNameEng = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCODE", DbType:="Char(15)")>  _
	Public Property IDCODE() As String
		Get
			Return Me._IDCODE
		End Get
		Set
			If (String.Equals(Me._IDCODE, value) = false) Then
				Me._IDCODE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BirthDate", DbType:="DateTime")>  _
	Public Property BirthDate() As System.Nullable(Of Date)
		Get
			Return Me._BirthDate
		End Get
		Set
			If (Me._BirthDate.Equals(value) = false) Then
				Me._BirthDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sex", DbType:="Char(1)")>  _
	Public Property Sex() As System.Nullable(Of Char)
		Get
			Return Me._Sex
		End Get
		Set
			If (Me._Sex.Equals(value) = false) Then
				Me._Sex = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployDate", DbType:="DateTime")>  _
	Public Property EmployDate() As System.Nullable(Of Date)
		Get
			Return Me._EmployDate
		End Get
		Set
			If (Me._EmployDate.Equals(value) = false) Then
				Me._EmployDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="DateTime")>  _
	Public Property EffectiveDate() As System.Nullable(Of Date)
		Get
			Return Me._EffectiveDate
		End Get
		Set
			If (Me._EffectiveDate.Equals(value) = false) Then
				Me._EffectiveDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResignDate", DbType:="DateTime")>  _
	Public Property ResignDate() As System.Nullable(Of Date)
		Get
			Return Me._ResignDate
		End Get
		Set
			If (Me._ResignDate.Equals(value) = false) Then
				Me._ResignDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Position() As String
		Get
			Return Me._Position
		End Get
		Set
			If (String.Equals(Me._Position, value) = false) Then
				Me._Position = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Char(20)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me._Username = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Signature", DbType:="VarChar(50)")>  _
	Public Property Signature() As String
		Get
			Return Me._Signature
		End Get
		Set
			If (String.Equals(Me._Signature, value) = false) Then
				Me._Signature = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTE", DbType:="VarChar(200)")>  _
	Public Property NOTE() As String
		Get
			Return Me._NOTE
		End Get
		Set
			If (String.Equals(Me._NOTE, value) = false) Then
				Me._NOTE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DivName", DbType:="VarChar(120)")>  _
	Public Property DivName() As String
		Get
			Return Me._DivName
		End Get
		Set
			If (String.Equals(Me._DivName, value) = false) Then
				Me._DivName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmpTypeDesc", DbType:="VarChar(100)")>  _
	Public Property EmpTypeDesc() As String
		Get
			Return Me._EmpTypeDesc
		End Get
		Set
			If (String.Equals(Me._EmpTypeDesc, value) = false) Then
				Me._EmpTypeDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="VarChar(50)")>  _
	Public Property Department() As String
		Get
			Return Me._Department
		End Get
		Set
			If (String.Equals(Me._Department, value) = false) Then
				Me._Department = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName2", DbType:="NVarChar(128)")>  _
	Public Property UserName2() As String
		Get
			Return Me._UserName2
		End Get
		Set
			If (String.Equals(Me._UserName2, value) = false) Then
				Me._UserName2 = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EmpGroup")>  _
Partial Public Class EmpGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmpGroupID As Integer
	
	Private _EmpGroupName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmpGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmpGroupIDChanged()
    End Sub
    Partial Private Sub OnEmpGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnEmpGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmpGroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmpGroupID() As Integer
		Get
			Return Me._EmpGroupID
		End Get
		Set
			If ((Me._EmpGroupID = value)  _
						= false) Then
				Me.OnEmpGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._EmpGroupID = value
				Me.SendPropertyChanged("EmpGroupID")
				Me.OnEmpGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmpGroupName", DbType:="VarChar(50)")>  _
	Public Property EmpGroupName() As String
		Get
			Return Me._EmpGroupName
		End Get
		Set
			If (String.Equals(Me._EmpGroupName, value) = false) Then
				Me.OnEmpGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._EmpGroupName = value
				Me.SendPropertyChanged("EmpGroupName")
				Me.OnEmpGroupNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SSO_UserGroup")>  _
Partial Public Class SSO_UserGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _ProjectCode As String
	
	Private _UserGroupCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnProjectCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProjectCodeChanged()
    End Sub
    Partial Private Sub OnUserGroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnUserGroupCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProjectCode() As String
		Get
			Return Me._ProjectCode
		End Get
		Set
			If (String.Equals(Me._ProjectCode, value) = false) Then
				Me.OnProjectCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProjectCode = value
				Me.SendPropertyChanged("ProjectCode")
				Me.OnProjectCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroupCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserGroupCode() As String
		Get
			Return Me._UserGroupCode
		End Get
		Set
			If (String.Equals(Me._UserGroupCode, value) = false) Then
				Me.OnUserGroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._UserGroupCode = value
				Me.SendPropertyChanged("UserGroupCode")
				Me.OnUserGroupCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employees")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmployeeID As Integer
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _Title As String
	
	Private _TitleOfCourtesy As String
	
	Private _BirthDate As System.Nullable(Of Date)
	
	Private _HireDate As System.Nullable(Of Date)
	
	Private _Address As String
	
	Private _City As String
	
	Private _Region As String
	
	Private _PostalCode As String
	
	Private _Country As String
	
	Private _HomePhone As String
	
	Private _Extension As String
	
	Private _Photo As System.Data.Linq.Binary
	
	Private _Notes As String
	
	Private _ReportsTo As System.Nullable(Of Integer)
	
	Private _PhotoPath As String
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _EmpGroupID As System.Nullable(Of Integer)
	
	Private _Email As String
	
	Private _Province As String
	
	Private _Amphur As String
	
	Private _District As String
	
	Private _LOCATION_CODE As String
	
	Private _TempUserName As String
	
	Private _TempPassword As String
	
	Private _TempPasswordQuestion As String
	
	Private _TempPasswordAnswer As String
	
	Private _IsActivate As System.Nullable(Of Boolean)
	
	Private _ActivateCode As System.Nullable(Of System.Guid)
	
	Private _ActivationDate As System.Nullable(Of Date)
	
	Private _Employees As EntitySet(Of Employee)
	
	Private _Employee As EntityRef(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTitleOfCourtesyChanging(value As String)
    End Sub
    Partial Private Sub OnTitleOfCourtesyChanged()
    End Sub
    Partial Private Sub OnBirthDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBirthDateChanged()
    End Sub
    Partial Private Sub OnHireDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHireDateChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnRegionChanging(value As String)
    End Sub
    Partial Private Sub OnRegionChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnHomePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnHomePhoneChanged()
    End Sub
    Partial Private Sub OnExtensionChanging(value As String)
    End Sub
    Partial Private Sub OnExtensionChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnReportsToChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReportsToChanged()
    End Sub
    Partial Private Sub OnPhotoPathChanging(value As String)
    End Sub
    Partial Private Sub OnPhotoPathChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnEmpGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmpGroupIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnProvinceChanged()
    End Sub
    Partial Private Sub OnAmphurChanging(value As String)
    End Sub
    Partial Private Sub OnAmphurChanged()
    End Sub
    Partial Private Sub OnDistrictChanging(value As String)
    End Sub
    Partial Private Sub OnDistrictChanged()
    End Sub
    Partial Private Sub OnLOCATION_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnLOCATION_CODEChanged()
    End Sub
    Partial Private Sub OnTempUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnTempUserNameChanged()
    End Sub
    Partial Private Sub OnTempPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnTempPasswordChanged()
    End Sub
    Partial Private Sub OnTempPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnTempPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnTempPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnTempPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsActivateChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActivateChanged()
    End Sub
    Partial Private Sub OnActivateCodeChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnActivateCodeChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Employees = New EntitySet(Of Employee)(AddressOf Me.attach_Employees, AddressOf Me.detach_Employees)
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(400)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(400)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(400)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleOfCourtesy", DbType:="NVarChar(400)")>  _
	Public Property TitleOfCourtesy() As String
		Get
			Return Me._TitleOfCourtesy
		End Get
		Set
			If (String.Equals(Me._TitleOfCourtesy, value) = false) Then
				Me.OnTitleOfCourtesyChanging(value)
				Me.SendPropertyChanging
				Me._TitleOfCourtesy = value
				Me.SendPropertyChanged("TitleOfCourtesy")
				Me.OnTitleOfCourtesyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BirthDate", DbType:="DateTime")>  _
	Public Property BirthDate() As System.Nullable(Of Date)
		Get
			Return Me._BirthDate
		End Get
		Set
			If (Me._BirthDate.Equals(value) = false) Then
				Me.OnBirthDateChanging(value)
				Me.SendPropertyChanging
				Me._BirthDate = value
				Me.SendPropertyChanged("BirthDate")
				Me.OnBirthDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HireDate", DbType:="DateTime")>  _
	Public Property HireDate() As System.Nullable(Of Date)
		Get
			Return Me._HireDate
		End Get
		Set
			If (Me._HireDate.Equals(value) = false) Then
				Me.OnHireDateChanging(value)
				Me.SendPropertyChanging
				Me._HireDate = value
				Me.SendPropertyChanged("HireDate")
				Me.OnHireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(400)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(400)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(400)")>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me.OnRegionChanging(value)
				Me.SendPropertyChanging
				Me._Region = value
				Me.SendPropertyChanged("Region")
				Me.OnRegionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(400)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(400)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePhone", DbType:="NVarChar(400)")>  _
	Public Property HomePhone() As String
		Get
			Return Me._HomePhone
		End Get
		Set
			If (String.Equals(Me._HomePhone, value) = false) Then
				Me.OnHomePhoneChanging(value)
				Me.SendPropertyChanging
				Me._HomePhone = value
				Me.SendPropertyChanged("HomePhone")
				Me.OnHomePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extension", DbType:="NVarChar(400)")>  _
	Public Property Extension() As String
		Get
			Return Me._Extension
		End Get
		Set
			If (String.Equals(Me._Extension, value) = false) Then
				Me.OnExtensionChanging(value)
				Me.SendPropertyChanging
				Me._Extension = value
				Me.SendPropertyChanged("Extension")
				Me.OnExtensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Photo() As System.Data.Linq.Binary
		Get
			Return Me._Photo
		End Get
		Set
			If (Object.Equals(Me._Photo, value) = false) Then
				Me.OnPhotoChanging(value)
				Me.SendPropertyChanging
				Me._Photo = value
				Me.SendPropertyChanged("Photo")
				Me.OnPhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportsTo", DbType:="Int")>  _
	Public Property ReportsTo() As System.Nullable(Of Integer)
		Get
			Return Me._ReportsTo
		End Get
		Set
			If (Me._ReportsTo.Equals(value) = false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnReportsToChanging(value)
				Me.SendPropertyChanging
				Me._ReportsTo = value
				Me.SendPropertyChanged("ReportsTo")
				Me.OnReportsToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoPath", DbType:="NVarChar(255)")>  _
	Public Property PhotoPath() As String
		Get
			Return Me._PhotoPath
		End Get
		Set
			If (String.Equals(Me._PhotoPath, value) = false) Then
				Me.OnPhotoPathChanging(value)
				Me.SendPropertyChanging
				Me._PhotoPath = value
				Me.SendPropertyChanged("PhotoPath")
				Me.OnPhotoPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmpGroupID", DbType:="Int")>  _
	Public Property EmpGroupID() As System.Nullable(Of Integer)
		Get
			Return Me._EmpGroupID
		End Get
		Set
			If (Me._EmpGroupID.Equals(value) = false) Then
				Me.OnEmpGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._EmpGroupID = value
				Me.SendPropertyChanged("EmpGroupID")
				Me.OnEmpGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(400)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province", DbType:="NVarChar(400)")>  _
	Public Property Province() As String
		Get
			Return Me._Province
		End Get
		Set
			If (String.Equals(Me._Province, value) = false) Then
				Me.OnProvinceChanging(value)
				Me.SendPropertyChanging
				Me._Province = value
				Me.SendPropertyChanged("Province")
				Me.OnProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amphur", DbType:="NVarChar(400)")>  _
	Public Property Amphur() As String
		Get
			Return Me._Amphur
		End Get
		Set
			If (String.Equals(Me._Amphur, value) = false) Then
				Me.OnAmphurChanging(value)
				Me.SendPropertyChanging
				Me._Amphur = value
				Me.SendPropertyChanged("Amphur")
				Me.OnAmphurChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District", DbType:="NVarChar(400)")>  _
	Public Property District() As String
		Get
			Return Me._District
		End Get
		Set
			If (String.Equals(Me._District, value) = false) Then
				Me.OnDistrictChanging(value)
				Me.SendPropertyChanging
				Me._District = value
				Me.SendPropertyChanged("District")
				Me.OnDistrictChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCATION_CODE", DbType:="VarChar(6)")>  _
	Public Property LOCATION_CODE() As String
		Get
			Return Me._LOCATION_CODE
		End Get
		Set
			If (String.Equals(Me._LOCATION_CODE, value) = false) Then
				Me.OnLOCATION_CODEChanging(value)
				Me.SendPropertyChanging
				Me._LOCATION_CODE = value
				Me.SendPropertyChanged("LOCATION_CODE")
				Me.OnLOCATION_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempUserName", DbType:="NVarChar(128)")>  _
	Public Property TempUserName() As String
		Get
			Return Me._TempUserName
		End Get
		Set
			If (String.Equals(Me._TempUserName, value) = false) Then
				Me.OnTempUserNameChanging(value)
				Me.SendPropertyChanging
				Me._TempUserName = value
				Me.SendPropertyChanged("TempUserName")
				Me.OnTempUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPassword", DbType:="NVarChar(128)")>  _
	Public Property TempPassword() As String
		Get
			Return Me._TempPassword
		End Get
		Set
			If (String.Equals(Me._TempPassword, value) = false) Then
				Me.OnTempPasswordChanging(value)
				Me.SendPropertyChanging
				Me._TempPassword = value
				Me.SendPropertyChanged("TempPassword")
				Me.OnTempPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property TempPasswordQuestion() As String
		Get
			Return Me._TempPasswordQuestion
		End Get
		Set
			If (String.Equals(Me._TempPasswordQuestion, value) = false) Then
				Me.OnTempPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._TempPasswordQuestion = value
				Me.SendPropertyChanged("TempPasswordQuestion")
				Me.OnTempPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property TempPasswordAnswer() As String
		Get
			Return Me._TempPasswordAnswer
		End Get
		Set
			If (String.Equals(Me._TempPasswordAnswer, value) = false) Then
				Me.OnTempPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._TempPasswordAnswer = value
				Me.SendPropertyChanged("TempPasswordAnswer")
				Me.OnTempPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActivate", DbType:="Bit")>  _
	Public Property IsActivate() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActivate
		End Get
		Set
			If (Me._IsActivate.Equals(value) = false) Then
				Me.OnIsActivateChanging(value)
				Me.SendPropertyChanging
				Me._IsActivate = value
				Me.SendPropertyChanged("IsActivate")
				Me.OnIsActivateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivateCode", DbType:="UniqueIdentifier")>  _
	Public Property ActivateCode() As System.Nullable(Of System.Guid)
		Get
			Return Me._ActivateCode
		End Get
		Set
			If (Me._ActivateCode.Equals(value) = false) Then
				Me.OnActivateCodeChanging(value)
				Me.SendPropertyChanging
				Me._ActivateCode = value
				Me.SendPropertyChanged("ActivateCode")
				Me.OnActivateCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="DateTime")>  _
	Public Property ActivationDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (Me._ActivationDate.Equals(value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Employee", Storage:="_Employees", ThisKey:="EmployeeID", OtherKey:="ReportsTo")>  _
	Public Property Employees() As EntitySet(Of Employee)
		Get
			Return Me._Employees
		End Get
		Set
			Me._Employees.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Employee", Storage:="_Employee", ThisKey:="ReportsTo", OtherKey:="EmployeeID", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.Employees.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Employees.Add(Me)
					Me._ReportsTo = value.EmployeeID
				Else
					Me._ReportsTo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MailNotifications")>  _
Partial Public Class MailNotification
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _MailFrom As String
	
	Private _MailTo As String
	
	Private _MailCC As String
	
	Private _MailBcc As String
	
	Private _MailSubject As String
	
	Private _MailBody As String
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _CreationDate As System.Nullable(Of Date)
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMailFromChanging(value As String)
    End Sub
    Partial Private Sub OnMailFromChanged()
    End Sub
    Partial Private Sub OnMailToChanging(value As String)
    End Sub
    Partial Private Sub OnMailToChanged()
    End Sub
    Partial Private Sub OnMailCCChanging(value As String)
    End Sub
    Partial Private Sub OnMailCCChanged()
    End Sub
    Partial Private Sub OnMailBccChanging(value As String)
    End Sub
    Partial Private Sub OnMailBccChanged()
    End Sub
    Partial Private Sub OnMailSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnMailSubjectChanged()
    End Sub
    Partial Private Sub OnMailBodyChanging(value As String)
    End Sub
    Partial Private Sub OnMailBodyChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="VarChar(8)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailFrom", DbType:="VarChar(MAX)")>  _
	Public Property MailFrom() As String
		Get
			Return Me._MailFrom
		End Get
		Set
			If (String.Equals(Me._MailFrom, value) = false) Then
				Me.OnMailFromChanging(value)
				Me.SendPropertyChanging
				Me._MailFrom = value
				Me.SendPropertyChanged("MailFrom")
				Me.OnMailFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailTo", DbType:="VarChar(MAX)")>  _
	Public Property MailTo() As String
		Get
			Return Me._MailTo
		End Get
		Set
			If (String.Equals(Me._MailTo, value) = false) Then
				Me.OnMailToChanging(value)
				Me.SendPropertyChanging
				Me._MailTo = value
				Me.SendPropertyChanged("MailTo")
				Me.OnMailToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailCC", DbType:="VarChar(MAX)")>  _
	Public Property MailCC() As String
		Get
			Return Me._MailCC
		End Get
		Set
			If (String.Equals(Me._MailCC, value) = false) Then
				Me.OnMailCCChanging(value)
				Me.SendPropertyChanging
				Me._MailCC = value
				Me.SendPropertyChanged("MailCC")
				Me.OnMailCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailBcc", DbType:="VarChar(MAX)")>  _
	Public Property MailBcc() As String
		Get
			Return Me._MailBcc
		End Get
		Set
			If (String.Equals(Me._MailBcc, value) = false) Then
				Me.OnMailBccChanging(value)
				Me.SendPropertyChanging
				Me._MailBcc = value
				Me.SendPropertyChanged("MailBcc")
				Me.OnMailBccChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailSubject", DbType:="VarChar(MAX)")>  _
	Public Property MailSubject() As String
		Get
			Return Me._MailSubject
		End Get
		Set
			If (String.Equals(Me._MailSubject, value) = false) Then
				Me.OnMailSubjectChanging(value)
				Me.SendPropertyChanging
				Me._MailSubject = value
				Me.SendPropertyChanged("MailSubject")
				Me.OnMailSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailBody", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MailBody() As String
		Get
			Return Me._MailBody
		End Get
		Set
			If (String.Equals(Me._MailBody, value) = false) Then
				Me.OnMailBodyChanging(value)
				Me.SendPropertyChanging
				Me._MailBody = value
				Me.SendPropertyChanged("MailBody")
				Me.OnMailBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me.OnCreationDateChanging(value)
				Me.SendPropertyChanging
				Me._CreationDate = value
				Me.SendPropertyChanged("CreationDate")
				Me.OnCreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.master_amphur")>  _
Partial Public Class master_amphur
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AMPHUR_ID As Integer
	
	Private _AMPHUR_CODE As String
	
	Private _AMPHUR_NAME As String
	
	Private _GEO_ID As System.Nullable(Of Integer)
	
	Private _PROVINCE_ID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAMPHUR_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAMPHUR_IDChanged()
    End Sub
    Partial Private Sub OnAMPHUR_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnAMPHUR_CODEChanged()
    End Sub
    Partial Private Sub OnAMPHUR_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnAMPHUR_NAMEChanged()
    End Sub
    Partial Private Sub OnGEO_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGEO_IDChanged()
    End Sub
    Partial Private Sub OnPROVINCE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPROVINCE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMPHUR_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AMPHUR_ID() As Integer
		Get
			Return Me._AMPHUR_ID
		End Get
		Set
			If ((Me._AMPHUR_ID = value)  _
						= false) Then
				Me.OnAMPHUR_IDChanging(value)
				Me.SendPropertyChanging
				Me._AMPHUR_ID = value
				Me.SendPropertyChanged("AMPHUR_ID")
				Me.OnAMPHUR_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMPHUR_CODE", DbType:="VarChar(4)")>  _
	Public Property AMPHUR_CODE() As String
		Get
			Return Me._AMPHUR_CODE
		End Get
		Set
			If (String.Equals(Me._AMPHUR_CODE, value) = false) Then
				Me.OnAMPHUR_CODEChanging(value)
				Me.SendPropertyChanging
				Me._AMPHUR_CODE = value
				Me.SendPropertyChanged("AMPHUR_CODE")
				Me.OnAMPHUR_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMPHUR_NAME", DbType:="VarChar(150)")>  _
	Public Property AMPHUR_NAME() As String
		Get
			Return Me._AMPHUR_NAME
		End Get
		Set
			If (String.Equals(Me._AMPHUR_NAME, value) = false) Then
				Me.OnAMPHUR_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._AMPHUR_NAME = value
				Me.SendPropertyChanged("AMPHUR_NAME")
				Me.OnAMPHUR_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GEO_ID", DbType:="Int")>  _
	Public Property GEO_ID() As System.Nullable(Of Integer)
		Get
			Return Me._GEO_ID
		End Get
		Set
			If (Me._GEO_ID.Equals(value) = false) Then
				Me.OnGEO_IDChanging(value)
				Me.SendPropertyChanging
				Me._GEO_ID = value
				Me.SendPropertyChanged("GEO_ID")
				Me.OnGEO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE_ID", DbType:="Int")>  _
	Public Property PROVINCE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._PROVINCE_ID
		End Get
		Set
			If (Me._PROVINCE_ID.Equals(value) = false) Then
				Me.OnPROVINCE_IDChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE_ID = value
				Me.SendPropertyChanged("PROVINCE_ID")
				Me.OnPROVINCE_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.master_district")>  _
Partial Public Class master_district
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DISTRICT_ID As Integer
	
	Private _DISTRICT_CODE As String
	
	Private _DISTRICT_NAME As String
	
	Private _AMPHUR_ID As System.Nullable(Of Integer)
	
	Private _PROVINCE_ID As System.Nullable(Of Integer)
	
	Private _GEO_ID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDISTRICT_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDISTRICT_IDChanged()
    End Sub
    Partial Private Sub OnDISTRICT_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnDISTRICT_CODEChanged()
    End Sub
    Partial Private Sub OnDISTRICT_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnDISTRICT_NAMEChanged()
    End Sub
    Partial Private Sub OnAMPHUR_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAMPHUR_IDChanged()
    End Sub
    Partial Private Sub OnPROVINCE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPROVINCE_IDChanged()
    End Sub
    Partial Private Sub OnGEO_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGEO_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISTRICT_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DISTRICT_ID() As Integer
		Get
			Return Me._DISTRICT_ID
		End Get
		Set
			If ((Me._DISTRICT_ID = value)  _
						= false) Then
				Me.OnDISTRICT_IDChanging(value)
				Me.SendPropertyChanging
				Me._DISTRICT_ID = value
				Me.SendPropertyChanged("DISTRICT_ID")
				Me.OnDISTRICT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISTRICT_CODE", DbType:="VarChar(6)")>  _
	Public Property DISTRICT_CODE() As String
		Get
			Return Me._DISTRICT_CODE
		End Get
		Set
			If (String.Equals(Me._DISTRICT_CODE, value) = false) Then
				Me.OnDISTRICT_CODEChanging(value)
				Me.SendPropertyChanging
				Me._DISTRICT_CODE = value
				Me.SendPropertyChanged("DISTRICT_CODE")
				Me.OnDISTRICT_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISTRICT_NAME", DbType:="VarChar(150)")>  _
	Public Property DISTRICT_NAME() As String
		Get
			Return Me._DISTRICT_NAME
		End Get
		Set
			If (String.Equals(Me._DISTRICT_NAME, value) = false) Then
				Me.OnDISTRICT_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._DISTRICT_NAME = value
				Me.SendPropertyChanged("DISTRICT_NAME")
				Me.OnDISTRICT_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMPHUR_ID", DbType:="Int")>  _
	Public Property AMPHUR_ID() As System.Nullable(Of Integer)
		Get
			Return Me._AMPHUR_ID
		End Get
		Set
			If (Me._AMPHUR_ID.Equals(value) = false) Then
				Me.OnAMPHUR_IDChanging(value)
				Me.SendPropertyChanging
				Me._AMPHUR_ID = value
				Me.SendPropertyChanged("AMPHUR_ID")
				Me.OnAMPHUR_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE_ID", DbType:="Int")>  _
	Public Property PROVINCE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._PROVINCE_ID
		End Get
		Set
			If (Me._PROVINCE_ID.Equals(value) = false) Then
				Me.OnPROVINCE_IDChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE_ID = value
				Me.SendPropertyChanged("PROVINCE_ID")
				Me.OnPROVINCE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GEO_ID", DbType:="Int")>  _
	Public Property GEO_ID() As System.Nullable(Of Integer)
		Get
			Return Me._GEO_ID
		End Get
		Set
			If (Me._GEO_ID.Equals(value) = false) Then
				Me.OnGEO_IDChanging(value)
				Me.SendPropertyChanging
				Me._GEO_ID = value
				Me.SendPropertyChanged("GEO_ID")
				Me.OnGEO_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.master_geography")>  _
Partial Public Class master_geography
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GEO_ID As Integer
	
	Private _GEO_NAME As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGEO_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGEO_IDChanged()
    End Sub
    Partial Private Sub OnGEO_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnGEO_NAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GEO_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GEO_ID() As Integer
		Get
			Return Me._GEO_ID
		End Get
		Set
			If ((Me._GEO_ID = value)  _
						= false) Then
				Me.OnGEO_IDChanging(value)
				Me.SendPropertyChanging
				Me._GEO_ID = value
				Me.SendPropertyChanged("GEO_ID")
				Me.OnGEO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GEO_NAME", DbType:="VarChar(255)")>  _
	Public Property GEO_NAME() As String
		Get
			Return Me._GEO_NAME
		End Get
		Set
			If (String.Equals(Me._GEO_NAME, value) = false) Then
				Me.OnGEO_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._GEO_NAME = value
				Me.SendPropertyChanged("GEO_NAME")
				Me.OnGEO_NAMEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.master_location")>  _
Partial Public Class master_location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _LOCATION_CODE As String
	
	Private _PROVINCE As String
	
	Private _AMPHUR As String
	
	Private _DISTRICT As String
	
	Private _ZIPCODE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLOCATION_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnLOCATION_CODEChanged()
    End Sub
    Partial Private Sub OnPROVINCEChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCEChanged()
    End Sub
    Partial Private Sub OnAMPHURChanging(value As String)
    End Sub
    Partial Private Sub OnAMPHURChanged()
    End Sub
    Partial Private Sub OnDISTRICTChanging(value As String)
    End Sub
    Partial Private Sub OnDISTRICTChanged()
    End Sub
    Partial Private Sub OnZIPCODEChanging(value As String)
    End Sub
    Partial Private Sub OnZIPCODEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCATION_CODE", DbType:="VarChar(6)")>  _
	Public Property LOCATION_CODE() As String
		Get
			Return Me._LOCATION_CODE
		End Get
		Set
			If (String.Equals(Me._LOCATION_CODE, value) = false) Then
				Me.OnLOCATION_CODEChanging(value)
				Me.SendPropertyChanging
				Me._LOCATION_CODE = value
				Me.SendPropertyChanged("LOCATION_CODE")
				Me.OnLOCATION_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE", DbType:="VarChar(50)")>  _
	Public Property PROVINCE() As String
		Get
			Return Me._PROVINCE
		End Get
		Set
			If (String.Equals(Me._PROVINCE, value) = false) Then
				Me.OnPROVINCEChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE = value
				Me.SendPropertyChanged("PROVINCE")
				Me.OnPROVINCEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMPHUR", DbType:="VarChar(50)")>  _
	Public Property AMPHUR() As String
		Get
			Return Me._AMPHUR
		End Get
		Set
			If (String.Equals(Me._AMPHUR, value) = false) Then
				Me.OnAMPHURChanging(value)
				Me.SendPropertyChanging
				Me._AMPHUR = value
				Me.SendPropertyChanged("AMPHUR")
				Me.OnAMPHURChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISTRICT", DbType:="VarChar(50)")>  _
	Public Property DISTRICT() As String
		Get
			Return Me._DISTRICT
		End Get
		Set
			If (String.Equals(Me._DISTRICT, value) = false) Then
				Me.OnDISTRICTChanging(value)
				Me.SendPropertyChanging
				Me._DISTRICT = value
				Me.SendPropertyChanged("DISTRICT")
				Me.OnDISTRICTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE", DbType:="VarChar(5)")>  _
	Public Property ZIPCODE() As String
		Get
			Return Me._ZIPCODE
		End Get
		Set
			If (String.Equals(Me._ZIPCODE, value) = false) Then
				Me.OnZIPCODEChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE = value
				Me.SendPropertyChanged("ZIPCODE")
				Me.OnZIPCODEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.master_province")>  _
Partial Public Class master_province
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PROVINCE_ID As Integer
	
	Private _PROVINCE_CODE As String
	
	Private _PROVINCE_NAME As String
	
	Private _GEO_ID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPROVINCE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPROVINCE_IDChanged()
    End Sub
    Partial Private Sub OnPROVINCE_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCE_CODEChanged()
    End Sub
    Partial Private Sub OnPROVINCE_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCE_NAMEChanged()
    End Sub
    Partial Private Sub OnGEO_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGEO_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PROVINCE_ID() As Integer
		Get
			Return Me._PROVINCE_ID
		End Get
		Set
			If ((Me._PROVINCE_ID = value)  _
						= false) Then
				Me.OnPROVINCE_IDChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE_ID = value
				Me.SendPropertyChanged("PROVINCE_ID")
				Me.OnPROVINCE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE_CODE", DbType:="VarChar(2)")>  _
	Public Property PROVINCE_CODE() As String
		Get
			Return Me._PROVINCE_CODE
		End Get
		Set
			If (String.Equals(Me._PROVINCE_CODE, value) = false) Then
				Me.OnPROVINCE_CODEChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE_CODE = value
				Me.SendPropertyChanged("PROVINCE_CODE")
				Me.OnPROVINCE_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE_NAME", DbType:="VarChar(150)")>  _
	Public Property PROVINCE_NAME() As String
		Get
			Return Me._PROVINCE_NAME
		End Get
		Set
			If (String.Equals(Me._PROVINCE_NAME, value) = false) Then
				Me.OnPROVINCE_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE_NAME = value
				Me.SendPropertyChanged("PROVINCE_NAME")
				Me.OnPROVINCE_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GEO_ID", DbType:="Int")>  _
	Public Property GEO_ID() As System.Nullable(Of Integer)
		Get
			Return Me._GEO_ID
		End Get
		Set
			If (Me._GEO_ID.Equals(value) = false) Then
				Me.OnGEO_IDChanging(value)
				Me.SendPropertyChanging
				Me._GEO_ID = value
				Me.SendPropertyChanged("GEO_ID")
				Me.OnGEO_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.master_zipcode")>  _
Partial Public Class master_zipcode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ZIPCODE_ID As Integer
	
	Private _DISTRICT_CODE As String
	
	Private _PROVINCE_ID As System.Nullable(Of Integer)
	
	Private _AMPHUR_ID As System.Nullable(Of Integer)
	
	Private _DISTRICT_ID As System.Nullable(Of Integer)
	
	Private _ZIPCODE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnZIPCODE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnZIPCODE_IDChanged()
    End Sub
    Partial Private Sub OnDISTRICT_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnDISTRICT_CODEChanged()
    End Sub
    Partial Private Sub OnPROVINCE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPROVINCE_IDChanged()
    End Sub
    Partial Private Sub OnAMPHUR_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAMPHUR_IDChanged()
    End Sub
    Partial Private Sub OnDISTRICT_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDISTRICT_IDChanged()
    End Sub
    Partial Private Sub OnZIPCODEChanging(value As String)
    End Sub
    Partial Private Sub OnZIPCODEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ZIPCODE_ID() As Integer
		Get
			Return Me._ZIPCODE_ID
		End Get
		Set
			If ((Me._ZIPCODE_ID = value)  _
						= false) Then
				Me.OnZIPCODE_IDChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE_ID = value
				Me.SendPropertyChanged("ZIPCODE_ID")
				Me.OnZIPCODE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISTRICT_CODE", DbType:="VarChar(100)")>  _
	Public Property DISTRICT_CODE() As String
		Get
			Return Me._DISTRICT_CODE
		End Get
		Set
			If (String.Equals(Me._DISTRICT_CODE, value) = false) Then
				Me.OnDISTRICT_CODEChanging(value)
				Me.SendPropertyChanging
				Me._DISTRICT_CODE = value
				Me.SendPropertyChanged("DISTRICT_CODE")
				Me.OnDISTRICT_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCE_ID", DbType:="Int")>  _
	Public Property PROVINCE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._PROVINCE_ID
		End Get
		Set
			If (Me._PROVINCE_ID.Equals(value) = false) Then
				Me.OnPROVINCE_IDChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCE_ID = value
				Me.SendPropertyChanged("PROVINCE_ID")
				Me.OnPROVINCE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AMPHUR_ID", DbType:="Int")>  _
	Public Property AMPHUR_ID() As System.Nullable(Of Integer)
		Get
			Return Me._AMPHUR_ID
		End Get
		Set
			If (Me._AMPHUR_ID.Equals(value) = false) Then
				Me.OnAMPHUR_IDChanging(value)
				Me.SendPropertyChanging
				Me._AMPHUR_ID = value
				Me.SendPropertyChanged("AMPHUR_ID")
				Me.OnAMPHUR_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DISTRICT_ID", DbType:="Int")>  _
	Public Property DISTRICT_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DISTRICT_ID
		End Get
		Set
			If (Me._DISTRICT_ID.Equals(value) = false) Then
				Me.OnDISTRICT_IDChanging(value)
				Me.SendPropertyChanging
				Me._DISTRICT_ID = value
				Me.SendPropertyChanged("DISTRICT_ID")
				Me.OnDISTRICT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZIPCODE", DbType:="VarChar(5)")>  _
	Public Property ZIPCODE() As String
		Get
			Return Me._ZIPCODE
		End Get
		Set
			If (String.Equals(Me._ZIPCODE, value) = false) Then
				Me.OnZIPCODEChanging(value)
				Me.SendPropertyChanging
				Me._ZIPCODE = value
				Me.SendPropertyChanged("ZIPCODE")
				Me.OnZIPCODEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Permissions")>  _
Partial Public Class Portal_Permission
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PermissionID As Integer
	
	Private _PermissionCode As String
	
	Private _PermissionName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPermissionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPermissionIDChanged()
    End Sub
    Partial Private Sub OnPermissionCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPermissionCodeChanged()
    End Sub
    Partial Private Sub OnPermissionNameChanging(value As String)
    End Sub
    Partial Private Sub OnPermissionNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PermissionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PermissionID() As Integer
		Get
			Return Me._PermissionID
		End Get
		Set
			If ((Me._PermissionID = value)  _
						= false) Then
				Me.OnPermissionIDChanging(value)
				Me.SendPropertyChanging
				Me._PermissionID = value
				Me.SendPropertyChanged("PermissionID")
				Me.OnPermissionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PermissionCode", DbType:="VarChar(50)")>  _
	Public Property PermissionCode() As String
		Get
			Return Me._PermissionCode
		End Get
		Set
			If (String.Equals(Me._PermissionCode, value) = false) Then
				Me.OnPermissionCodeChanging(value)
				Me.SendPropertyChanging
				Me._PermissionCode = value
				Me.SendPropertyChanged("PermissionCode")
				Me.OnPermissionCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PermissionName", DbType:="VarChar(50)")>  _
	Public Property PermissionName() As String
		Get
			Return Me._PermissionName
		End Get
		Set
			If (String.Equals(Me._PermissionName, value) = false) Then
				Me.OnPermissionNameChanging(value)
				Me.SendPropertyChanging
				Me._PermissionName = value
				Me.SendPropertyChanged("PermissionName")
				Me.OnPermissionNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Roles")>  _
Partial Public Class Portal_Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RoleID As Integer
	
	Private _PortalID As Integer
	
	Private _RoleName As String
	
	Private _RoleDescription As String
	
	Private _RoleCode As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _Portal_TabRoles As EntitySet(Of Portal_TabRole)
	
	Private _Portal_UserRoles As EntitySet(Of Portal_UserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnRoleDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRoleDescriptionChanged()
    End Sub
    Partial Private Sub OnRoleCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRoleCodeChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Portal_TabRoles = New EntitySet(Of Portal_TabRole)(AddressOf Me.attach_Portal_TabRoles, AddressOf Me.detach_Portal_TabRoles)
		Me._Portal_UserRoles = New EntitySet(Of Portal_UserRole)(AddressOf Me.attach_Portal_UserRoles, AddressOf Me.detach_Portal_UserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
	Public Property PortalID() As Integer
		Get
			Return Me._PortalID
		End Get
		Set
			If ((Me._PortalID = value)  _
						= false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleDescription", DbType:="NVarChar(400)")>  _
	Public Property RoleDescription() As String
		Get
			Return Me._RoleDescription
		End Get
		Set
			If (String.Equals(Me._RoleDescription, value) = false) Then
				Me.OnRoleDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RoleDescription = value
				Me.SendPropertyChanged("RoleDescription")
				Me.OnRoleDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleCode", DbType:="NVarChar(50)")>  _
	Public Property RoleCode() As String
		Get
			Return Me._RoleCode
		End Get
		Set
			If (String.Equals(Me._RoleCode, value) = false) Then
				Me.OnRoleCodeChanging(value)
				Me.SendPropertyChanging
				Me._RoleCode = value
				Me.SendPropertyChanged("RoleCode")
				Me.OnRoleCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me.OnModifyDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifyDate = value
				Me.SendPropertyChanged("ModifyDate")
				Me.OnModifyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Portal_Role_Portal_TabRole", Storage:="_Portal_TabRoles", ThisKey:="RoleID", OtherKey:="RoleID")>  _
	Public Property Portal_TabRoles() As EntitySet(Of Portal_TabRole)
		Get
			Return Me._Portal_TabRoles
		End Get
		Set
			Me._Portal_TabRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Portal_Role_Portal_UserRole", Storage:="_Portal_UserRoles", ThisKey:="RoleID", OtherKey:="RoleID")>  _
	Public Property Portal_UserRoles() As EntitySet(Of Portal_UserRole)
		Get
			Return Me._Portal_UserRoles
		End Get
		Set
			Me._Portal_UserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Portal_TabRoles(ByVal entity As Portal_TabRole)
		Me.SendPropertyChanging
		entity.Portal_Role = Me
	End Sub
	
	Private Sub detach_Portal_TabRoles(ByVal entity As Portal_TabRole)
		Me.SendPropertyChanging
		entity.Portal_Role = Nothing
	End Sub
	
	Private Sub attach_Portal_UserRoles(ByVal entity As Portal_UserRole)
		Me.SendPropertyChanging
		entity.Portal_Role = Me
	End Sub
	
	Private Sub detach_Portal_UserRoles(ByVal entity As Portal_UserRole)
		Me.SendPropertyChanging
		entity.Portal_Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Table")>  _
Partial Public Class Portal_Table
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ITEM_CODE As String
	
	Private _ITEM_SEQ As System.Nullable(Of Integer)
	
	Private _ITEM_STATUS As System.Nullable(Of Boolean)
	
	Private _ITEM_PARENT As String
	
	Private _ITEM_DESC_TH As String
	
	Private _ITEM_DESC_EN As String
	
	Private _TABLE_NUMBER As String
	
	Private _CREATIONDATE As System.Nullable(Of Date)
	
	Private _ITEM_NOTE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnITEM_CODEChanging(value As String)
    End Sub
    Partial Private Sub OnITEM_CODEChanged()
    End Sub
    Partial Private Sub OnITEM_SEQChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnITEM_SEQChanged()
    End Sub
    Partial Private Sub OnITEM_STATUSChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnITEM_STATUSChanged()
    End Sub
    Partial Private Sub OnITEM_PARENTChanging(value As String)
    End Sub
    Partial Private Sub OnITEM_PARENTChanged()
    End Sub
    Partial Private Sub OnITEM_DESC_THChanging(value As String)
    End Sub
    Partial Private Sub OnITEM_DESC_THChanged()
    End Sub
    Partial Private Sub OnITEM_DESC_ENChanging(value As String)
    End Sub
    Partial Private Sub OnITEM_DESC_ENChanged()
    End Sub
    Partial Private Sub OnTABLE_NUMBERChanging(value As String)
    End Sub
    Partial Private Sub OnTABLE_NUMBERChanged()
    End Sub
    Partial Private Sub OnCREATIONDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATIONDATEChanged()
    End Sub
    Partial Private Sub OnITEM_NOTEChanging(value As String)
    End Sub
    Partial Private Sub OnITEM_NOTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_CODE", DbType:="VarChar(8)")>  _
	Public Property ITEM_CODE() As String
		Get
			Return Me._ITEM_CODE
		End Get
		Set
			If (String.Equals(Me._ITEM_CODE, value) = false) Then
				Me.OnITEM_CODEChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_CODE = value
				Me.SendPropertyChanged("ITEM_CODE")
				Me.OnITEM_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_SEQ", DbType:="Int")>  _
	Public Property ITEM_SEQ() As System.Nullable(Of Integer)
		Get
			Return Me._ITEM_SEQ
		End Get
		Set
			If (Me._ITEM_SEQ.Equals(value) = false) Then
				Me.OnITEM_SEQChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_SEQ = value
				Me.SendPropertyChanged("ITEM_SEQ")
				Me.OnITEM_SEQChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_STATUS", DbType:="Bit")>  _
	Public Property ITEM_STATUS() As System.Nullable(Of Boolean)
		Get
			Return Me._ITEM_STATUS
		End Get
		Set
			If (Me._ITEM_STATUS.Equals(value) = false) Then
				Me.OnITEM_STATUSChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_STATUS = value
				Me.SendPropertyChanged("ITEM_STATUS")
				Me.OnITEM_STATUSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_PARENT", DbType:="VarChar(5)")>  _
	Public Property ITEM_PARENT() As String
		Get
			Return Me._ITEM_PARENT
		End Get
		Set
			If (String.Equals(Me._ITEM_PARENT, value) = false) Then
				Me.OnITEM_PARENTChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_PARENT = value
				Me.SendPropertyChanged("ITEM_PARENT")
				Me.OnITEM_PARENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_DESC_TH", DbType:="VarChar(255)")>  _
	Public Property ITEM_DESC_TH() As String
		Get
			Return Me._ITEM_DESC_TH
		End Get
		Set
			If (String.Equals(Me._ITEM_DESC_TH, value) = false) Then
				Me.OnITEM_DESC_THChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_DESC_TH = value
				Me.SendPropertyChanged("ITEM_DESC_TH")
				Me.OnITEM_DESC_THChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_DESC_EN", DbType:="VarChar(255)")>  _
	Public Property ITEM_DESC_EN() As String
		Get
			Return Me._ITEM_DESC_EN
		End Get
		Set
			If (String.Equals(Me._ITEM_DESC_EN, value) = false) Then
				Me.OnITEM_DESC_ENChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_DESC_EN = value
				Me.SendPropertyChanged("ITEM_DESC_EN")
				Me.OnITEM_DESC_ENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TABLE_NUMBER", DbType:="VarChar(5)")>  _
	Public Property TABLE_NUMBER() As String
		Get
			Return Me._TABLE_NUMBER
		End Get
		Set
			If (String.Equals(Me._TABLE_NUMBER, value) = false) Then
				Me.OnTABLE_NUMBERChanging(value)
				Me.SendPropertyChanging
				Me._TABLE_NUMBER = value
				Me.SendPropertyChanged("TABLE_NUMBER")
				Me.OnTABLE_NUMBERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATIONDATE", DbType:="DateTime")>  _
	Public Property CREATIONDATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATIONDATE
		End Get
		Set
			If (Me._CREATIONDATE.Equals(value) = false) Then
				Me.OnCREATIONDATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATIONDATE = value
				Me.SendPropertyChanged("CREATIONDATE")
				Me.OnCREATIONDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEM_NOTE", DbType:="VarChar(255)")>  _
	Public Property ITEM_NOTE() As String
		Get
			Return Me._ITEM_NOTE
		End Get
		Set
			If (String.Equals(Me._ITEM_NOTE, value) = false) Then
				Me.OnITEM_NOTEChanging(value)
				Me.SendPropertyChanging
				Me._ITEM_NOTE = value
				Me.SendPropertyChanged("ITEM_NOTE")
				Me.OnITEM_NOTEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_UserTabs")>  _
Partial Public Class Portal_UserTab
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _USERID As System.Nullable(Of Integer)
	
	Private _TABID As System.Nullable(Of Integer)
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _PERMISSION As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUSERIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUSERIDChanged()
    End Sub
    Partial Private Sub OnTABIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTABIDChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnPERMISSIONChanging(value As String)
    End Sub
    Partial Private Sub OnPERMISSIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERID", DbType:="Int")>  _
	Public Property USERID() As System.Nullable(Of Integer)
		Get
			Return Me._USERID
		End Get
		Set
			If (Me._USERID.Equals(value) = false) Then
				Me.OnUSERIDChanging(value)
				Me.SendPropertyChanging
				Me._USERID = value
				Me.SendPropertyChanged("USERID")
				Me.OnUSERIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TABID", DbType:="Int")>  _
	Public Property TABID() As System.Nullable(Of Integer)
		Get
			Return Me._TABID
		End Get
		Set
			If (Me._TABID.Equals(value) = false) Then
				Me.OnTABIDChanging(value)
				Me.SendPropertyChanging
				Me._TABID = value
				Me.SendPropertyChanged("TABID")
				Me.OnTABIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERMISSION", DbType:="VarChar(255)")>  _
	Public Property PERMISSION() As String
		Get
			Return Me._PERMISSION
		End Get
		Set
			If (String.Equals(Me._PERMISSION, value) = false) Then
				Me.OnPERMISSIONChanging(value)
				Me.SendPropertyChanging
				Me._PERMISSION = value
				Me.SendPropertyChanged("PERMISSION")
				Me.OnPERMISSIONChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PortalCfg_Globals")>  _
Partial Public Class PortalCfg_Global
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PortalId As Integer
	
	Private _PortalName As String
	
	Private _AlwaysShowEditButton As System.Nullable(Of Boolean)
	
	Private _UnderConstruction As System.Nullable(Of Boolean)
	
	Private _PortalCode As String
	
	Private _PortalPage As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _cfg_conn As String
	
	Private _cfg_query_user As String
	
	Private _cfg_url_passport As String
	
	Private _PortalCfg_Tabs As EntitySet(Of PortalCfg_Tab)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnPortalNameChanging(value As String)
    End Sub
    Partial Private Sub OnPortalNameChanged()
    End Sub
    Partial Private Sub OnAlwaysShowEditButtonChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAlwaysShowEditButtonChanged()
    End Sub
    Partial Private Sub OnUnderConstructionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUnderConstructionChanged()
    End Sub
    Partial Private Sub OnPortalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPortalCodeChanged()
    End Sub
    Partial Private Sub OnPortalPageChanging(value As String)
    End Sub
    Partial Private Sub OnPortalPageChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    Partial Private Sub Oncfg_connChanging(value As String)
    End Sub
    Partial Private Sub Oncfg_connChanged()
    End Sub
    Partial Private Sub Oncfg_query_userChanging(value As String)
    End Sub
    Partial Private Sub Oncfg_query_userChanged()
    End Sub
    Partial Private Sub Oncfg_url_passportChanging(value As String)
    End Sub
    Partial Private Sub Oncfg_url_passportChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PortalCfg_Tabs = New EntitySet(Of PortalCfg_Tab)(AddressOf Me.attach_PortalCfg_Tabs, AddressOf Me.detach_PortalCfg_Tabs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me.OnPortalNameChanging(value)
				Me.SendPropertyChanging
				Me._PortalName = value
				Me.SendPropertyChanged("PortalName")
				Me.OnPortalNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlwaysShowEditButton", DbType:="Bit")>  _
	Public Property AlwaysShowEditButton() As System.Nullable(Of Boolean)
		Get
			Return Me._AlwaysShowEditButton
		End Get
		Set
			If (Me._AlwaysShowEditButton.Equals(value) = false) Then
				Me.OnAlwaysShowEditButtonChanging(value)
				Me.SendPropertyChanging
				Me._AlwaysShowEditButton = value
				Me.SendPropertyChanged("AlwaysShowEditButton")
				Me.OnAlwaysShowEditButtonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnderConstruction", DbType:="Bit")>  _
	Public Property UnderConstruction() As System.Nullable(Of Boolean)
		Get
			Return Me._UnderConstruction
		End Get
		Set
			If (Me._UnderConstruction.Equals(value) = false) Then
				Me.OnUnderConstructionChanging(value)
				Me.SendPropertyChanging
				Me._UnderConstruction = value
				Me.SendPropertyChanged("UnderConstruction")
				Me.OnUnderConstructionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="VarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me.OnPortalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PortalCode = value
				Me.SendPropertyChanged("PortalCode")
				Me.OnPortalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalPage", DbType:="VarChar(255)")>  _
	Public Property PortalPage() As String
		Get
			Return Me._PortalPage
		End Get
		Set
			If (String.Equals(Me._PortalPage, value) = false) Then
				Me.OnPortalPageChanging(value)
				Me.SendPropertyChanging
				Me._PortalPage = value
				Me.SendPropertyChanged("PortalPage")
				Me.OnPortalPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me.OnModifyDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifyDate = value
				Me.SendPropertyChanged("ModifyDate")
				Me.OnModifyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cfg_conn", DbType:="VarChar(MAX)")>  _
	Public Property cfg_conn() As String
		Get
			Return Me._cfg_conn
		End Get
		Set
			If (String.Equals(Me._cfg_conn, value) = false) Then
				Me.Oncfg_connChanging(value)
				Me.SendPropertyChanging
				Me._cfg_conn = value
				Me.SendPropertyChanged("cfg_conn")
				Me.Oncfg_connChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cfg_query_user", DbType:="VarChar(MAX)")>  _
	Public Property cfg_query_user() As String
		Get
			Return Me._cfg_query_user
		End Get
		Set
			If (String.Equals(Me._cfg_query_user, value) = false) Then
				Me.Oncfg_query_userChanging(value)
				Me.SendPropertyChanging
				Me._cfg_query_user = value
				Me.SendPropertyChanged("cfg_query_user")
				Me.Oncfg_query_userChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cfg_url_passport", DbType:="VarChar(MAX)")>  _
	Public Property cfg_url_passport() As String
		Get
			Return Me._cfg_url_passport
		End Get
		Set
			If (String.Equals(Me._cfg_url_passport, value) = false) Then
				Me.Oncfg_url_passportChanging(value)
				Me.SendPropertyChanging
				Me._cfg_url_passport = value
				Me.SendPropertyChanged("cfg_url_passport")
				Me.Oncfg_url_passportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Global_PortalCfg_Tab", Storage:="_PortalCfg_Tabs", ThisKey:="PortalId", OtherKey:="PortalId")>  _
	Public Property PortalCfg_Tabs() As EntitySet(Of PortalCfg_Tab)
		Get
			Return Me._PortalCfg_Tabs
		End Get
		Set
			Me._PortalCfg_Tabs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PortalCfg_Tabs(ByVal entity As PortalCfg_Tab)
		Me.SendPropertyChanging
		entity.PortalCfg_Global = Me
	End Sub
	
	Private Sub detach_PortalCfg_Tabs(ByVal entity As PortalCfg_Tab)
		Me.SendPropertyChanging
		entity.PortalCfg_Global = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PortalCfg_Modules")>  _
Partial Public Class PortalCfg_Module
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ModuleId As Integer
	
	Private _ModuleTitle As String
	
	Private _ModuleOrder As System.Nullable(Of Integer)
	
	Private _EditRoles As String
	
	Private _PaneName As String
	
	Private _ShowMobile As System.Nullable(Of Boolean)
	
	Private _CacheTimeout As System.Nullable(Of Integer)
	
	Private _ModuleDefId As System.Nullable(Of Integer)
	
	Private _TabId As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _PortalCfg_ModuleSettings As EntitySet(Of PortalCfg_ModuleSetting)
	
	Private _PortalCfg_Tab As EntityRef(Of PortalCfg_Tab)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    Partial Private Sub OnModuleTitleChanging(value As String)
    End Sub
    Partial Private Sub OnModuleTitleChanged()
    End Sub
    Partial Private Sub OnModuleOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleOrderChanged()
    End Sub
    Partial Private Sub OnEditRolesChanging(value As String)
    End Sub
    Partial Private Sub OnEditRolesChanged()
    End Sub
    Partial Private Sub OnPaneNameChanging(value As String)
    End Sub
    Partial Private Sub OnPaneNameChanged()
    End Sub
    Partial Private Sub OnShowMobileChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowMobileChanged()
    End Sub
    Partial Private Sub OnCacheTimeoutChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCacheTimeoutChanged()
    End Sub
    Partial Private Sub OnModuleDefIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleDefIdChanged()
    End Sub
    Partial Private Sub OnTabIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTabIdChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PortalCfg_ModuleSettings = New EntitySet(Of PortalCfg_ModuleSetting)(AddressOf Me.attach_PortalCfg_ModuleSettings, AddressOf Me.detach_PortalCfg_ModuleSettings)
		Me._PortalCfg_Tab = CType(Nothing, EntityRef(Of PortalCfg_Tab))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ModuleId() As Integer
		Get
			Return Me._ModuleId
		End Get
		Set
			If ((Me._ModuleId = value)  _
						= false) Then
				Me.OnModuleIdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleId = value
				Me.SendPropertyChanged("ModuleId")
				Me.OnModuleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleTitle", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property ModuleTitle() As String
		Get
			Return Me._ModuleTitle
		End Get
		Set
			If (String.Equals(Me._ModuleTitle, value) = false) Then
				Me.OnModuleTitleChanging(value)
				Me.SendPropertyChanging
				Me._ModuleTitle = value
				Me.SendPropertyChanged("ModuleTitle")
				Me.OnModuleTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleOrder", DbType:="Int")>  _
	Public Property ModuleOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleOrder
		End Get
		Set
			If (Me._ModuleOrder.Equals(value) = false) Then
				Me.OnModuleOrderChanging(value)
				Me.SendPropertyChanging
				Me._ModuleOrder = value
				Me.SendPropertyChanged("ModuleOrder")
				Me.OnModuleOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EditRoles", DbType:="VarChar(MAX)")>  _
	Public Property EditRoles() As String
		Get
			Return Me._EditRoles
		End Get
		Set
			If (String.Equals(Me._EditRoles, value) = false) Then
				Me.OnEditRolesChanging(value)
				Me.SendPropertyChanging
				Me._EditRoles = value
				Me.SendPropertyChanged("EditRoles")
				Me.OnEditRolesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaneName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PaneName() As String
		Get
			Return Me._PaneName
		End Get
		Set
			If (String.Equals(Me._PaneName, value) = false) Then
				Me.OnPaneNameChanging(value)
				Me.SendPropertyChanging
				Me._PaneName = value
				Me.SendPropertyChanged("PaneName")
				Me.OnPaneNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowMobile", DbType:="Bit")>  _
	Public Property ShowMobile() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowMobile
		End Get
		Set
			If (Me._ShowMobile.Equals(value) = false) Then
				Me.OnShowMobileChanging(value)
				Me.SendPropertyChanging
				Me._ShowMobile = value
				Me.SendPropertyChanged("ShowMobile")
				Me.OnShowMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CacheTimeout", DbType:="Int")>  _
	Public Property CacheTimeout() As System.Nullable(Of Integer)
		Get
			Return Me._CacheTimeout
		End Get
		Set
			If (Me._CacheTimeout.Equals(value) = false) Then
				Me.OnCacheTimeoutChanging(value)
				Me.SendPropertyChanging
				Me._CacheTimeout = value
				Me.SendPropertyChanged("CacheTimeout")
				Me.OnCacheTimeoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefId", DbType:="Int")>  _
	Public Property ModuleDefId() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleDefId
		End Get
		Set
			If (Me._ModuleDefId.Equals(value) = false) Then
				Me.OnModuleDefIdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefId = value
				Me.SendPropertyChanged("ModuleDefId")
				Me.OnModuleDefIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				If Me._PortalCfg_Tab.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTabIdChanging(value)
				Me.SendPropertyChanging
				Me._TabId = value
				Me.SendPropertyChanged("TabId")
				Me.OnTabIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me.OnModifyDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifyDate = value
				Me.SendPropertyChanged("ModifyDate")
				Me.OnModifyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Module_PortalCfg_ModuleSetting", Storage:="_PortalCfg_ModuleSettings", ThisKey:="ModuleId", OtherKey:="ModuleId")>  _
	Public Property PortalCfg_ModuleSettings() As EntitySet(Of PortalCfg_ModuleSetting)
		Get
			Return Me._PortalCfg_ModuleSettings
		End Get
		Set
			Me._PortalCfg_ModuleSettings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Tab_PortalCfg_Module", Storage:="_PortalCfg_Tab", ThisKey:="TabId", OtherKey:="TabId", IsForeignKey:=true)>  _
	Public Property PortalCfg_Tab() As PortalCfg_Tab
		Get
			Return Me._PortalCfg_Tab.Entity
		End Get
		Set
			Dim previousValue As PortalCfg_Tab = Me._PortalCfg_Tab.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PortalCfg_Tab.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PortalCfg_Tab.Entity = Nothing
					previousValue.PortalCfg_Modules.Remove(Me)
				End If
				Me._PortalCfg_Tab.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PortalCfg_Modules.Add(Me)
					Me._TabId = value.TabId
				Else
					Me._TabId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PortalCfg_Tab")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PortalCfg_ModuleSettings(ByVal entity As PortalCfg_ModuleSetting)
		Me.SendPropertyChanging
		entity.PortalCfg_Module = Me
	End Sub
	
	Private Sub detach_PortalCfg_ModuleSettings(ByVal entity As PortalCfg_ModuleSetting)
		Me.SendPropertyChanging
		entity.PortalCfg_Module = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PortalCfg_ModuleSettings")>  _
Partial Public Class PortalCfg_ModuleSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ModuleSettingId As Integer
	
	Private _SettingName As String
	
	Private _SettingText As String
	
	Private _ModuleId As System.Nullable(Of Integer)
	
	Private _PortalCfg_Module As EntityRef(Of PortalCfg_Module)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModuleSettingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnModuleSettingIdChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingTextChanging(value As String)
    End Sub
    Partial Private Sub OnSettingTextChanged()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PortalCfg_Module = CType(Nothing, EntityRef(Of PortalCfg_Module))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleSettingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ModuleSettingId() As Integer
		Get
			Return Me._ModuleSettingId
		End Get
		Set
			If ((Me._ModuleSettingId = value)  _
						= false) Then
				Me.OnModuleSettingIdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleSettingId = value
				Me.SendPropertyChanged("ModuleSettingId")
				Me.OnModuleSettingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingText", DbType:="NVarChar(250)")>  _
	Public Property SettingText() As String
		Get
			Return Me._SettingText
		End Get
		Set
			If (String.Equals(Me._SettingText, value) = false) Then
				Me.OnSettingTextChanging(value)
				Me.SendPropertyChanging
				Me._SettingText = value
				Me.SendPropertyChanged("SettingText")
				Me.OnSettingTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleId", DbType:="Int")>  _
	Public Property ModuleId() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleId
		End Get
		Set
			If (Me._ModuleId.Equals(value) = false) Then
				If Me._PortalCfg_Module.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnModuleIdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleId = value
				Me.SendPropertyChanged("ModuleId")
				Me.OnModuleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Module_PortalCfg_ModuleSetting", Storage:="_PortalCfg_Module", ThisKey:="ModuleId", OtherKey:="ModuleId", IsForeignKey:=true)>  _
	Public Property PortalCfg_Module() As PortalCfg_Module
		Get
			Return Me._PortalCfg_Module.Entity
		End Get
		Set
			Dim previousValue As PortalCfg_Module = Me._PortalCfg_Module.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PortalCfg_Module.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PortalCfg_Module.Entity = Nothing
					previousValue.PortalCfg_ModuleSettings.Remove(Me)
				End If
				Me._PortalCfg_Module.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PortalCfg_ModuleSettings.Add(Me)
					Me._ModuleId = value.ModuleId
				Else
					Me._ModuleId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PortalCfg_Module")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SingleSignOn_Mapping")>  _
Partial Public Class SingleSignOn_Mapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ProjectCode As String
	
	Private _RoleCode As String
	
	Private _UserId As System.Nullable(Of Integer)
	
	Private _UserMapping As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnProjectCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProjectCodeChanged()
    End Sub
    Partial Private Sub OnRoleCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRoleCodeChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserMappingChanging(value As String)
    End Sub
    Partial Private Sub OnUserMappingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectCode", DbType:="VarChar(50)")>  _
	Public Property ProjectCode() As String
		Get
			Return Me._ProjectCode
		End Get
		Set
			If (String.Equals(Me._ProjectCode, value) = false) Then
				Me.OnProjectCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProjectCode = value
				Me.SendPropertyChanged("ProjectCode")
				Me.OnProjectCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleCode", DbType:="VarChar(50)")>  _
	Public Property RoleCode() As String
		Get
			Return Me._RoleCode
		End Get
		Set
			If (String.Equals(Me._RoleCode, value) = false) Then
				Me.OnRoleCodeChanging(value)
				Me.SendPropertyChanging
				Me._RoleCode = value
				Me.SendPropertyChanged("RoleCode")
				Me.OnRoleCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
	Public Property UserId() As System.Nullable(Of Integer)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserMapping", DbType:="VarChar(50)")>  _
	Public Property UserMapping() As String
		Get
			Return Me._UserMapping
		End Get
		Set
			If (String.Equals(Me._UserMapping, value) = false) Then
				Me.OnUserMappingChanging(value)
				Me.SendPropertyChanging
				Me._UserMapping = value
				Me.SendPropertyChanged("UserMapping")
				Me.OnUserMappingChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SingleSignOn_Passport")>  _
Partial Public Class SingleSignOn_Passport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserName As String
	
	Private _Passport As System.Nullable(Of System.Guid)
	
	Private _CreationDate As System.Nullable(Of Date)
	
	Private _IP As String
	
	Private _PortalCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPassportChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPassportChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnPortalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPortalCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Passport", DbType:="UniqueIdentifier")>  _
	Public Property Passport() As System.Nullable(Of System.Guid)
		Get
			Return Me._Passport
		End Get
		Set
			If (Me._Passport.Equals(value) = false) Then
				Me.OnPassportChanging(value)
				Me.SendPropertyChanging
				Me._Passport = value
				Me.SendPropertyChanged("Passport")
				Me.OnPassportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me.OnCreationDateChanging(value)
				Me.SendPropertyChanging
				Me._CreationDate = value
				Me.SendPropertyChanged("CreationDate")
				Me.OnCreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="NVarChar(50)")>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me.OnIPChanging(value)
				Me.SendPropertyChanging
				Me._IP = value
				Me.SendPropertyChanged("IP")
				Me.OnIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="NVarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me.OnPortalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PortalCode = value
				Me.SendPropertyChanged("PortalCode")
				Me.OnPortalCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PortalCfg_ModuleDefinitions")>  _
Partial Public Class PortalCfg_ModuleDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ModuleDefId As Integer
	
	Private _ModuleDefName As String
	
	Private _ModuleDefSourceFile As String
	
	Private _ModuleDefMobileSourceFile As String
	
	Private _ModuleDefCode As String
	
	Private _ModuleDefDesc As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModuleDefIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnModuleDefIdChanged()
    End Sub
    Partial Private Sub OnModuleDefNameChanging(value As String)
    End Sub
    Partial Private Sub OnModuleDefNameChanged()
    End Sub
    Partial Private Sub OnModuleDefSourceFileChanging(value As String)
    End Sub
    Partial Private Sub OnModuleDefSourceFileChanged()
    End Sub
    Partial Private Sub OnModuleDefMobileSourceFileChanging(value As String)
    End Sub
    Partial Private Sub OnModuleDefMobileSourceFileChanged()
    End Sub
    Partial Private Sub OnModuleDefCodeChanging(value As String)
    End Sub
    Partial Private Sub OnModuleDefCodeChanged()
    End Sub
    Partial Private Sub OnModuleDefDescChanging(value As String)
    End Sub
    Partial Private Sub OnModuleDefDescChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ModuleDefId() As Integer
		Get
			Return Me._ModuleDefId
		End Get
		Set
			If ((Me._ModuleDefId = value)  _
						= false) Then
				Me.OnModuleDefIdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefId = value
				Me.SendPropertyChanged("ModuleDefId")
				Me.OnModuleDefIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefName", DbType:="NVarChar(150)")>  _
	Public Property ModuleDefName() As String
		Get
			Return Me._ModuleDefName
		End Get
		Set
			If (String.Equals(Me._ModuleDefName, value) = false) Then
				Me.OnModuleDefNameChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefName = value
				Me.SendPropertyChanged("ModuleDefName")
				Me.OnModuleDefNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefSourceFile", DbType:="NVarChar(250)")>  _
	Public Property ModuleDefSourceFile() As String
		Get
			Return Me._ModuleDefSourceFile
		End Get
		Set
			If (String.Equals(Me._ModuleDefSourceFile, value) = false) Then
				Me.OnModuleDefSourceFileChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefSourceFile = value
				Me.SendPropertyChanged("ModuleDefSourceFile")
				Me.OnModuleDefSourceFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefMobileSourceFile", DbType:="NVarChar(250)")>  _
	Public Property ModuleDefMobileSourceFile() As String
		Get
			Return Me._ModuleDefMobileSourceFile
		End Get
		Set
			If (String.Equals(Me._ModuleDefMobileSourceFile, value) = false) Then
				Me.OnModuleDefMobileSourceFileChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefMobileSourceFile = value
				Me.SendPropertyChanged("ModuleDefMobileSourceFile")
				Me.OnModuleDefMobileSourceFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefCode", DbType:="VarChar(50)")>  _
	Public Property ModuleDefCode() As String
		Get
			Return Me._ModuleDefCode
		End Get
		Set
			If (String.Equals(Me._ModuleDefCode, value) = false) Then
				Me.OnModuleDefCodeChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefCode = value
				Me.SendPropertyChanged("ModuleDefCode")
				Me.OnModuleDefCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefDesc", DbType:="VarChar(400)")>  _
	Public Property ModuleDefDesc() As String
		Get
			Return Me._ModuleDefDesc
		End Get
		Set
			If (String.Equals(Me._ModuleDefDesc, value) = false) Then
				Me.OnModuleDefDescChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefDesc = value
				Me.SendPropertyChanged("ModuleDefDesc")
				Me.OnModuleDefDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me.OnModifyDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifyDate = value
				Me.SendPropertyChanged("ModifyDate")
				Me.OnModifyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_TabRoles")>  _
Partial Public Class Portal_TabRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TabID As Integer
	
	Private _RoleID As Integer
	
	Private _Portal_Role As EntityRef(Of Portal_Role)
	
	Private _PortalCfg_Tab As EntityRef(Of PortalCfg_Tab)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTabIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTabIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Portal_Role = CType(Nothing, EntityRef(Of Portal_Role))
		Me._PortalCfg_Tab = CType(Nothing, EntityRef(Of PortalCfg_Tab))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TabID() As Integer
		Get
			Return Me._TabID
		End Get
		Set
			If ((Me._TabID = value)  _
						= false) Then
				If Me._PortalCfg_Tab.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTabIDChanging(value)
				Me.SendPropertyChanging
				Me._TabID = value
				Me.SendPropertyChanged("TabID")
				Me.OnTabIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				If Me._Portal_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Portal_Role_Portal_TabRole", Storage:="_Portal_Role", ThisKey:="RoleID", OtherKey:="RoleID", IsForeignKey:=true)>  _
	Public Property Portal_Role() As Portal_Role
		Get
			Return Me._Portal_Role.Entity
		End Get
		Set
			Dim previousValue As Portal_Role = Me._Portal_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Portal_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Portal_Role.Entity = Nothing
					previousValue.Portal_TabRoles.Remove(Me)
				End If
				Me._Portal_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Portal_TabRoles.Add(Me)
					Me._RoleID = value.RoleID
				Else
					Me._RoleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Portal_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Tab_Portal_TabRole", Storage:="_PortalCfg_Tab", ThisKey:="TabID", OtherKey:="TabId", IsForeignKey:=true)>  _
	Public Property PortalCfg_Tab() As PortalCfg_Tab
		Get
			Return Me._PortalCfg_Tab.Entity
		End Get
		Set
			Dim previousValue As PortalCfg_Tab = Me._PortalCfg_Tab.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PortalCfg_Tab.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PortalCfg_Tab.Entity = Nothing
					previousValue.Portal_TabRoles.Remove(Me)
				End If
				Me._PortalCfg_Tab.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Portal_TabRoles.Add(Me)
					Me._TabID = value.TabId
				Else
					Me._TabID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PortalCfg_Tab")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_UserRoles")>  _
Partial Public Class Portal_UserRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _RoleID As Integer
	
	Private _Permissions As String
	
	Private _Custom_Permission As String
	
	Private _Portal_Role As EntityRef(Of Portal_Role)
	
	Private _Portal_User As EntityRef(Of Portal_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnPermissionsChanging(value As String)
    End Sub
    Partial Private Sub OnPermissionsChanged()
    End Sub
    Partial Private Sub OnCustom_PermissionChanging(value As String)
    End Sub
    Partial Private Sub OnCustom_PermissionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Portal_Role = CType(Nothing, EntityRef(Of Portal_Role))
		Me._Portal_User = CType(Nothing, EntityRef(Of Portal_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._Portal_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				If Me._Portal_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permissions", DbType:="NVarChar(50)")>  _
	Public Property Permissions() As String
		Get
			Return Me._Permissions
		End Get
		Set
			If (String.Equals(Me._Permissions, value) = false) Then
				Me.OnPermissionsChanging(value)
				Me.SendPropertyChanging
				Me._Permissions = value
				Me.SendPropertyChanged("Permissions")
				Me.OnPermissionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Custom_Permission", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Custom_Permission() As String
		Get
			Return Me._Custom_Permission
		End Get
		Set
			If (String.Equals(Me._Custom_Permission, value) = false) Then
				Me.OnCustom_PermissionChanging(value)
				Me.SendPropertyChanging
				Me._Custom_Permission = value
				Me.SendPropertyChanged("Custom_Permission")
				Me.OnCustom_PermissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Portal_Role_Portal_UserRole", Storage:="_Portal_Role", ThisKey:="RoleID", OtherKey:="RoleID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Portal_Role() As Portal_Role
		Get
			Return Me._Portal_Role.Entity
		End Get
		Set
			Dim previousValue As Portal_Role = Me._Portal_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Portal_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Portal_Role.Entity = Nothing
					previousValue.Portal_UserRoles.Remove(Me)
				End If
				Me._Portal_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Portal_UserRoles.Add(Me)
					Me._RoleID = value.RoleID
				Else
					Me._RoleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Portal_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Portal_User_Portal_UserRole", Storage:="_Portal_User", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Portal_User() As Portal_User
		Get
			Return Me._Portal_User.Entity
		End Get
		Set
			Dim previousValue As Portal_User = Me._Portal_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Portal_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Portal_User.Entity = Nothing
					previousValue.Portal_UserRoles.Remove(Me)
				End If
				Me._Portal_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Portal_UserRoles.Add(Me)
					Me._UserID = value.UserID
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Portal_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_ModuleSettings")>  _
Partial Public Class v_ModuleSetting
	
	Private _ModuleId As Integer
	
	Private _ModuleTitle As String
	
	Private _ModuleOrder As System.Nullable(Of Integer)
	
	Private _EditRoles As String
	
	Private _PaneName As String
	
	Private _ShowMobile As System.Nullable(Of Boolean)
	
	Private _CacheTimeout As System.Nullable(Of Integer)
	
	Private _ModuleDefId As System.Nullable(Of Integer)
	
	Private _TabId As System.Nullable(Of Integer)
	
	Private _FriendlyName As String
	
	Private _DesktopSourceFile As String
	
	Private _MobileSourceFile As String
	
	Private _ModuleDefCode As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleId", DbType:="Int NOT NULL")>  _
	Public Property ModuleId() As Integer
		Get
			Return Me._ModuleId
		End Get
		Set
			If ((Me._ModuleId = value)  _
						= false) Then
				Me._ModuleId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleTitle", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property ModuleTitle() As String
		Get
			Return Me._ModuleTitle
		End Get
		Set
			If (String.Equals(Me._ModuleTitle, value) = false) Then
				Me._ModuleTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleOrder", DbType:="Int")>  _
	Public Property ModuleOrder() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleOrder
		End Get
		Set
			If (Me._ModuleOrder.Equals(value) = false) Then
				Me._ModuleOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EditRoles", DbType:="VarChar(MAX)")>  _
	Public Property EditRoles() As String
		Get
			Return Me._EditRoles
		End Get
		Set
			If (String.Equals(Me._EditRoles, value) = false) Then
				Me._EditRoles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaneName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PaneName() As String
		Get
			Return Me._PaneName
		End Get
		Set
			If (String.Equals(Me._PaneName, value) = false) Then
				Me._PaneName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowMobile", DbType:="Bit")>  _
	Public Property ShowMobile() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowMobile
		End Get
		Set
			If (Me._ShowMobile.Equals(value) = false) Then
				Me._ShowMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CacheTimeout", DbType:="Int")>  _
	Public Property CacheTimeout() As System.Nullable(Of Integer)
		Get
			Return Me._CacheTimeout
		End Get
		Set
			If (Me._CacheTimeout.Equals(value) = false) Then
				Me._CacheTimeout = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefId", DbType:="Int")>  _
	Public Property ModuleDefId() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleDefId
		End Get
		Set
			If (Me._ModuleDefId.Equals(value) = false) Then
				Me._ModuleDefId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				Me._TabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FriendlyName", DbType:="NVarChar(150)")>  _
	Public Property FriendlyName() As String
		Get
			Return Me._FriendlyName
		End Get
		Set
			If (String.Equals(Me._FriendlyName, value) = false) Then
				Me._FriendlyName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesktopSourceFile", DbType:="NVarChar(250)")>  _
	Public Property DesktopSourceFile() As String
		Get
			Return Me._DesktopSourceFile
		End Get
		Set
			If (String.Equals(Me._DesktopSourceFile, value) = false) Then
				Me._DesktopSourceFile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileSourceFile", DbType:="NVarChar(250)")>  _
	Public Property MobileSourceFile() As String
		Get
			Return Me._MobileSourceFile
		End Get
		Set
			If (String.Equals(Me._MobileSourceFile, value) = false) Then
				Me._MobileSourceFile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefCode", DbType:="VarChar(50)")>  _
	Public Property ModuleDefCode() As String
		Get
			Return Me._ModuleDefCode
		End Get
		Set
			If (String.Equals(Me._ModuleDefCode, value) = false) Then
				Me._ModuleDefCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me._CreateDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me._ModifyDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Users")>  _
Partial Public Class Portal_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _Comment As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _IsApproved As System.Nullable(Of Boolean)
	
	Private _LastActivityDate As System.Nullable(Of Date)
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _LastPasswordChangedDate As System.Nullable(Of Date)
	
	Private _CreationDate As System.Nullable(Of Date)
	
	Private _IsLocked As System.Nullable(Of Boolean)
	
	Private _LastLockOutDate As System.Nullable(Of Date)
	
	Private _FailedPasswordAttemptCount As System.Nullable(Of Integer)
	
	Private _FailedPasswordAttemptWindowStart As System.Nullable(Of Date)
	
	Private _FailedPasswordAnswerAttemptCount As System.Nullable(Of Integer)
	
	Private _FailedPasswordAnswerAttemptWindowStart As System.Nullable(Of Date)
	
	Private _ExpiredDate As System.Nullable(Of Date)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MobilePhone As String
	
	Private _OTP As String
	
	Private _Portal_UserRoles As EntitySet(Of Portal_UserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
    Partial Private Sub OnIsLockedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsLockedChanged()
    End Sub
    Partial Private Sub OnLastLockOutDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLockOutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnExpiredDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiredDateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnMobilePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePhoneChanged()
    End Sub
    Partial Private Sub OnOTPChanging(value As String)
    End Sub
    Partial Private Sub OnOTPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Portal_UserRoles = New EntitySet(Of Portal_UserRole)(AddressOf Me.attach_Portal_UserRoles, AddressOf Me.detach_Portal_UserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me.OnPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._PasswordQuestion = value
				Me.SendPropertyChanged("PasswordQuestion")
				Me.OnPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me.OnPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._PasswordAnswer = value
				Me.SendPropertyChanged("PasswordAnswer")
				Me.OnPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit")>  _
	Public Property IsApproved() As System.Nullable(Of Boolean)
		Get
			Return Me._IsApproved
		End Get
		Set
			If (Me._IsApproved.Equals(value) = false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime")>  _
	Public Property LastActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If (Me._LastActivityDate.Equals(value) = false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime")>  _
	Public Property LastPasswordChangedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If (Me._LastPasswordChangedDate.Equals(value) = false) Then
				Me.OnLastPasswordChangedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPasswordChangedDate = value
				Me.SendPropertyChanged("LastPasswordChangedDate")
				Me.OnLastPasswordChangedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me.OnCreationDateChanging(value)
				Me.SendPropertyChanging
				Me._CreationDate = value
				Me.SendPropertyChanged("CreationDate")
				Me.OnCreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLocked", DbType:="Bit")>  _
	Public Property IsLocked() As System.Nullable(Of Boolean)
		Get
			Return Me._IsLocked
		End Get
		Set
			If (Me._IsLocked.Equals(value) = false) Then
				Me.OnIsLockedChanging(value)
				Me.SendPropertyChanging
				Me._IsLocked = value
				Me.SendPropertyChanged("IsLocked")
				Me.OnIsLockedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockOutDate", DbType:="DateTime")>  _
	Public Property LastLockOutDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLockOutDate
		End Get
		Set
			If (Me._LastLockOutDate.Equals(value) = false) Then
				Me.OnLastLockOutDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLockOutDate = value
				Me.SendPropertyChanged("LastLockOutDate")
				Me.OnLastLockOutDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int")>  _
	Public Property FailedPasswordAttemptCount() As System.Nullable(Of Integer)
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If (Me._FailedPasswordAttemptCount.Equals(value) = false) Then
				Me.OnFailedPasswordAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAttemptCount")
				Me.OnFailedPasswordAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime")>  _
	Public Property FailedPasswordAttemptWindowStart() As System.Nullable(Of Date)
		Get
			Return Me._FailedPasswordAttemptWindowStart
		End Get
		Set
			If (Me._FailedPasswordAttemptWindowStart.Equals(value) = false) Then
				Me.OnFailedPasswordAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
				Me.OnFailedPasswordAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int")>  _
	Public Property FailedPasswordAnswerAttemptCount() As System.Nullable(Of Integer)
		Get
			Return Me._FailedPasswordAnswerAttemptCount
		End Get
		Set
			If (Me._FailedPasswordAnswerAttemptCount.Equals(value) = false) Then
				Me.OnFailedPasswordAnswerAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
				Me.OnFailedPasswordAnswerAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowStart", DbType:="DateTime")>  _
	Public Property FailedPasswordAnswerAttemptWindowStart() As System.Nullable(Of Date)
		Get
			Return Me._FailedPasswordAnswerAttemptWindowStart
		End Get
		Set
			If (Me._FailedPasswordAnswerAttemptWindowStart.Equals(value) = false) Then
				Me.OnFailedPasswordAnswerAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart")
				Me.OnFailedPasswordAnswerAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiredDate", DbType:="DateTime")>  _
	Public Property ExpiredDate() As System.Nullable(Of Date)
		Get
			Return Me._ExpiredDate
		End Get
		Set
			If (Me._ExpiredDate.Equals(value) = false) Then
				Me.OnExpiredDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiredDate = value
				Me.SendPropertyChanged("ExpiredDate")
				Me.OnExpiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePhone", DbType:="NVarChar(50)")>  _
	Public Property MobilePhone() As String
		Get
			Return Me._MobilePhone
		End Get
		Set
			If (String.Equals(Me._MobilePhone, value) = false) Then
				Me.OnMobilePhoneChanging(value)
				Me.SendPropertyChanging
				Me._MobilePhone = value
				Me.SendPropertyChanged("MobilePhone")
				Me.OnMobilePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTP", DbType:="NVarChar(50)")>  _
	Public Property OTP() As String
		Get
			Return Me._OTP
		End Get
		Set
			If (String.Equals(Me._OTP, value) = false) Then
				Me.OnOTPChanging(value)
				Me.SendPropertyChanging
				Me._OTP = value
				Me.SendPropertyChanged("OTP")
				Me.OnOTPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Portal_User_Portal_UserRole", Storage:="_Portal_UserRoles", ThisKey:="UserID", OtherKey:="UserID")>  _
	Public Property Portal_UserRoles() As EntitySet(Of Portal_UserRole)
		Get
			Return Me._Portal_UserRoles
		End Get
		Set
			Me._Portal_UserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Portal_UserRoles(ByVal entity As Portal_UserRole)
		Me.SendPropertyChanging
		entity.Portal_User = Me
	End Sub
	
	Private Sub detach_Portal_UserRoles(ByVal entity As Portal_UserRole)
		Me.SendPropertyChanging
		entity.Portal_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Users_OTPLogs")>  _
Partial Public Class Portal_Users_OTPLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GUID As String
	
	Private _UserName As String
	
	Private _MobilePhone As String
	
	Private _Message As String
	
	Private _taskId As String
	
	Private _messageId As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnMobilePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePhoneChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OntaskIdChanging(value As String)
    End Sub
    Partial Private Sub OntaskIdChanged()
    End Sub
    Partial Private Sub OnmessageIdChanging(value As String)
    End Sub
    Partial Private Sub OnmessageIdChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePhone", DbType:="VarChar(50)")>  _
	Public Property MobilePhone() As String
		Get
			Return Me._MobilePhone
		End Get
		Set
			If (String.Equals(Me._MobilePhone, value) = false) Then
				Me.OnMobilePhoneChanging(value)
				Me.SendPropertyChanging
				Me._MobilePhone = value
				Me.SendPropertyChanged("MobilePhone")
				Me.OnMobilePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="VarChar(400)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taskId", DbType:="VarChar(50)")>  _
	Public Property taskId() As String
		Get
			Return Me._taskId
		End Get
		Set
			If (String.Equals(Me._taskId, value) = false) Then
				Me.OntaskIdChanging(value)
				Me.SendPropertyChanging
				Me._taskId = value
				Me.SendPropertyChanged("taskId")
				Me.OntaskIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageId", DbType:="VarChar(50)")>  _
	Public Property messageId() As String
		Get
			Return Me._messageId
		End Get
		Set
			If (String.Equals(Me._messageId, value) = false) Then
				Me.OnmessageIdChanging(value)
				Me.SendPropertyChanging
				Me._messageId = value
				Me.SendPropertyChanged("messageId")
				Me.OnmessageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Users_PasswordLogs")>  _
Partial Public Class Portal_Users_PasswordLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserName As String
	
	Private _OldPassword As String
	
	Private _NewPassword As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _Type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnOldPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnOldPasswordChanged()
    End Sub
    Partial Private Sub OnNewPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnNewPasswordChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPassword", DbType:="VarChar(255)")>  _
	Public Property OldPassword() As String
		Get
			Return Me._OldPassword
		End Get
		Set
			If (String.Equals(Me._OldPassword, value) = false) Then
				Me.OnOldPasswordChanging(value)
				Me.SendPropertyChanging
				Me._OldPassword = value
				Me.SendPropertyChanged("OldPassword")
				Me.OnOldPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPassword", DbType:="VarChar(255)")>  _
	Public Property NewPassword() As String
		Get
			Return Me._NewPassword
		End Get
		Set
			If (String.Equals(Me._NewPassword, value) = false) Then
				Me.OnNewPasswordChanging(value)
				Me.SendPropertyChanging
				Me._NewPassword = value
				Me.SendPropertyChanged("NewPassword")
				Me.OnNewPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_DesktopTabs")>  _
Partial Public Class v_DesktopTab
	
	Private _TabId As System.Nullable(Of Integer)
	
	Private _PageId As String
	
	Private _TabName As String
	
	Private _TabOrder As System.Nullable(Of Integer)
	
	Private _ShowMobile As System.Nullable(Of Boolean)
	
	Private _MobileTabName As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Private _Sortpath As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _TreeLevel As System.Nullable(Of Integer)
	
	Private _IconID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				Me._TabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageId", DbType:="NVarChar(150)")>  _
	Public Property PageId() As String
		Get
			Return Me._PageId
		End Get
		Set
			If (String.Equals(Me._PageId, value) = false) Then
				Me._PageId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabName", DbType:="NVarChar(150)")>  _
	Public Property TabName() As String
		Get
			Return Me._TabName
		End Get
		Set
			If (String.Equals(Me._TabName, value) = false) Then
				Me._TabName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabOrder", DbType:="Int")>  _
	Public Property TabOrder() As System.Nullable(Of Integer)
		Get
			Return Me._TabOrder
		End Get
		Set
			If (Me._TabOrder.Equals(value) = false) Then
				Me._TabOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowMobile", DbType:="Bit")>  _
	Public Property ShowMobile() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowMobile
		End Get
		Set
			If (Me._ShowMobile.Equals(value) = false) Then
				Me._ShowMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileTabName", DbType:="NVarChar(150)")>  _
	Public Property MobileTabName() As String
		Get
			Return Me._MobileTabName
		End Get
		Set
			If (String.Equals(Me._MobileTabName, value) = false) Then
				Me._MobileTabName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int")>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				Me._ParentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sortpath", DbType:="VarChar(MAX)")>  _
	Public Property Sortpath() As String
		Get
			Return Me._Sortpath
		End Get
		Set
			If (String.Equals(Me._Sortpath, value) = false) Then
				Me._Sortpath = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me._CreateDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me._ModifyDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TreeLevel", DbType:="Int")>  _
	Public Property TreeLevel() As System.Nullable(Of Integer)
		Get
			Return Me._TreeLevel
		End Get
		Set
			If (Me._TreeLevel.Equals(value) = false) Then
				Me._TreeLevel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconID", DbType:="NVarChar(150)")>  _
	Public Property IconID() As String
		Get
			Return Me._IconID
		End Get
		Set
			If (String.Equals(Me._IconID, value) = false) Then
				Me._IconID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_UserTabs")>  _
Partial Public Class v_UserTab
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _TabId As System.Nullable(Of Integer)
	
	Private _TabName As String
	
	Private _TabOrder As System.Nullable(Of Integer)
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Private _Permission As String
	
	Private _PortalId As Integer
	
	Private _PortalCode As String
	
	Private _PortalName As String
	
	Private _Sortpath As String
	
	Private _IconID As String
	
	Private _PageId As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				Me._TabId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabName", DbType:="NVarChar(150)")>  _
	Public Property TabName() As String
		Get
			Return Me._TabName
		End Get
		Set
			If (String.Equals(Me._TabName, value) = false) Then
				Me._TabName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabOrder", DbType:="Int")>  _
	Public Property TabOrder() As System.Nullable(Of Integer)
		Get
			Return Me._TabOrder
		End Get
		Set
			If (Me._TabOrder.Equals(value) = false) Then
				Me._TabOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int")>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				Me._ParentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permission", DbType:="VarChar(255)")>  _
	Public Property Permission() As String
		Get
			Return Me._Permission
		End Get
		Set
			If (String.Equals(Me._Permission, value) = false) Then
				Me._Permission = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalCode", DbType:="VarChar(50)")>  _
	Public Property PortalCode() As String
		Get
			Return Me._PortalCode
		End Get
		Set
			If (String.Equals(Me._PortalCode, value) = false) Then
				Me._PortalCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PortalName() As String
		Get
			Return Me._PortalName
		End Get
		Set
			If (String.Equals(Me._PortalName, value) = false) Then
				Me._PortalName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sortpath", DbType:="VarChar(MAX)")>  _
	Public Property Sortpath() As String
		Get
			Return Me._Sortpath
		End Get
		Set
			If (String.Equals(Me._Sortpath, value) = false) Then
				Me._Sortpath = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconID", DbType:="NVarChar(150)")>  _
	Public Property IconID() As String
		Get
			Return Me._IconID
		End Get
		Set
			If (String.Equals(Me._IconID, value) = false) Then
				Me._IconID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageId", DbType:="NVarChar(150)")>  _
	Public Property PageId() As String
		Get
			Return Me._PageId
		End Get
		Set
			If (String.Equals(Me._PageId, value) = false) Then
				Me._PageId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PortalCfg_Tabs")>  _
Partial Public Class PortalCfg_Tab
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TabId As Integer
	
	Private _TabName As String
	
	Private _TabOrder As System.Nullable(Of Integer)
	
	Private _AccessRoles As String
	
	Private _ShowMobile As System.Nullable(Of Boolean)
	
	Private _MobileTabName As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ModifyDate As System.Nullable(Of Date)
	
	Private _PageID As String
	
	Private _IconID As String
	
	Private _PortalCfg_Modules As EntitySet(Of PortalCfg_Module)
	
	Private _Portal_TabRoles As EntitySet(Of Portal_TabRole)
	
	Private _PortalCfg_Global As EntityRef(Of PortalCfg_Global)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTabIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTabIdChanged()
    End Sub
    Partial Private Sub OnTabNameChanging(value As String)
    End Sub
    Partial Private Sub OnTabNameChanged()
    End Sub
    Partial Private Sub OnTabOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTabOrderChanged()
    End Sub
    Partial Private Sub OnAccessRolesChanging(value As String)
    End Sub
    Partial Private Sub OnAccessRolesChanged()
    End Sub
    Partial Private Sub OnShowMobileChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowMobileChanged()
    End Sub
    Partial Private Sub OnMobileTabNameChanging(value As String)
    End Sub
    Partial Private Sub OnMobileTabNameChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnParentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIdChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    Partial Private Sub OnPageIDChanging(value As String)
    End Sub
    Partial Private Sub OnPageIDChanged()
    End Sub
    Partial Private Sub OnIconIDChanging(value As String)
    End Sub
    Partial Private Sub OnIconIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PortalCfg_Modules = New EntitySet(Of PortalCfg_Module)(AddressOf Me.attach_PortalCfg_Modules, AddressOf Me.detach_PortalCfg_Modules)
		Me._Portal_TabRoles = New EntitySet(Of Portal_TabRole)(AddressOf Me.attach_Portal_TabRoles, AddressOf Me.detach_Portal_TabRoles)
		Me._PortalCfg_Global = CType(Nothing, EntityRef(Of PortalCfg_Global))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TabId() As Integer
		Get
			Return Me._TabId
		End Get
		Set
			If ((Me._TabId = value)  _
						= false) Then
				Me.OnTabIdChanging(value)
				Me.SendPropertyChanging
				Me._TabId = value
				Me.SendPropertyChanged("TabId")
				Me.OnTabIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property TabName() As String
		Get
			Return Me._TabName
		End Get
		Set
			If (String.Equals(Me._TabName, value) = false) Then
				Me.OnTabNameChanging(value)
				Me.SendPropertyChanging
				Me._TabName = value
				Me.SendPropertyChanged("TabName")
				Me.OnTabNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabOrder", DbType:="Int")>  _
	Public Property TabOrder() As System.Nullable(Of Integer)
		Get
			Return Me._TabOrder
		End Get
		Set
			If (Me._TabOrder.Equals(value) = false) Then
				Me.OnTabOrderChanging(value)
				Me.SendPropertyChanging
				Me._TabOrder = value
				Me.SendPropertyChanged("TabOrder")
				Me.OnTabOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccessRoles", DbType:="VarChar(MAX)")>  _
	Public Property AccessRoles() As String
		Get
			Return Me._AccessRoles
		End Get
		Set
			If (String.Equals(Me._AccessRoles, value) = false) Then
				Me.OnAccessRolesChanging(value)
				Me.SendPropertyChanging
				Me._AccessRoles = value
				Me.SendPropertyChanged("AccessRoles")
				Me.OnAccessRolesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowMobile", DbType:="Bit")>  _
	Public Property ShowMobile() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowMobile
		End Get
		Set
			If (Me._ShowMobile.Equals(value) = false) Then
				Me.OnShowMobileChanging(value)
				Me.SendPropertyChanging
				Me._ShowMobile = value
				Me.SendPropertyChanged("ShowMobile")
				Me.OnShowMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileTabName", DbType:="NVarChar(150)")>  _
	Public Property MobileTabName() As String
		Get
			Return Me._MobileTabName
		End Get
		Set
			If (String.Equals(Me._MobileTabName, value) = false) Then
				Me.OnMobileTabNameChanging(value)
				Me.SendPropertyChanging
				Me._MobileTabName = value
				Me.SendPropertyChanged("MobileTabName")
				Me.OnMobileTabNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				If Me._PortalCfg_Global.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int")>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				Me.OnParentIdChanging(value)
				Me.SendPropertyChanging
				Me._ParentId = value
				Me.SendPropertyChanged("ParentId")
				Me.OnParentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime")>  _
	Public Property ModifyDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifyDate
		End Get
		Set
			If (Me._ModifyDate.Equals(value) = false) Then
				Me.OnModifyDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifyDate = value
				Me.SendPropertyChanged("ModifyDate")
				Me.OnModifyDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageID", DbType:="NVarChar(150)")>  _
	Public Property PageID() As String
		Get
			Return Me._PageID
		End Get
		Set
			If (String.Equals(Me._PageID, value) = false) Then
				Me.OnPageIDChanging(value)
				Me.SendPropertyChanging
				Me._PageID = value
				Me.SendPropertyChanged("PageID")
				Me.OnPageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconID", DbType:="NVarChar(150)")>  _
	Public Property IconID() As String
		Get
			Return Me._IconID
		End Get
		Set
			If (String.Equals(Me._IconID, value) = false) Then
				Me.OnIconIDChanging(value)
				Me.SendPropertyChanging
				Me._IconID = value
				Me.SendPropertyChanged("IconID")
				Me.OnIconIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Tab_PortalCfg_Module", Storage:="_PortalCfg_Modules", ThisKey:="TabId", OtherKey:="TabId")>  _
	Public Property PortalCfg_Modules() As EntitySet(Of PortalCfg_Module)
		Get
			Return Me._PortalCfg_Modules
		End Get
		Set
			Me._PortalCfg_Modules.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Tab_Portal_TabRole", Storage:="_Portal_TabRoles", ThisKey:="TabId", OtherKey:="TabID")>  _
	Public Property Portal_TabRoles() As EntitySet(Of Portal_TabRole)
		Get
			Return Me._Portal_TabRoles
		End Get
		Set
			Me._Portal_TabRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PortalCfg_Global_PortalCfg_Tab", Storage:="_PortalCfg_Global", ThisKey:="PortalId", OtherKey:="PortalId", IsForeignKey:=true)>  _
	Public Property PortalCfg_Global() As PortalCfg_Global
		Get
			Return Me._PortalCfg_Global.Entity
		End Get
		Set
			Dim previousValue As PortalCfg_Global = Me._PortalCfg_Global.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PortalCfg_Global.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PortalCfg_Global.Entity = Nothing
					previousValue.PortalCfg_Tabs.Remove(Me)
				End If
				Me._PortalCfg_Global.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PortalCfg_Tabs.Add(Me)
					Me._PortalId = value.PortalId
				Else
					Me._PortalId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PortalCfg_Global")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PortalCfg_Modules(ByVal entity As PortalCfg_Module)
		Me.SendPropertyChanging
		entity.PortalCfg_Tab = Me
	End Sub
	
	Private Sub detach_PortalCfg_Modules(ByVal entity As PortalCfg_Module)
		Me.SendPropertyChanging
		entity.PortalCfg_Tab = Nothing
	End Sub
	
	Private Sub attach_Portal_TabRoles(ByVal entity As Portal_TabRole)
		Me.SendPropertyChanging
		entity.PortalCfg_Tab = Me
	End Sub
	
	Private Sub detach_Portal_TabRoles(ByVal entity As Portal_TabRole)
		Me.SendPropertyChanging
		entity.PortalCfg_Tab = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Portal_Users_DefaultPage")>  _
Partial Public Class Portal_Users_DefaultPage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _UserId As System.Nullable(Of Integer)
	
	Private _TabId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnTabIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTabIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
	Public Property UserId() As System.Nullable(Of Integer)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabId", DbType:="Int")>  _
	Public Property TabId() As System.Nullable(Of Integer)
		Get
			Return Me._TabId
		End Get
		Set
			If (Me._TabId.Equals(value) = false) Then
				Me.OnTabIdChanging(value)
				Me.SendPropertyChanging
				Me._TabId = value
				Me.SendPropertyChanged("TabId")
				Me.OnTabIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
